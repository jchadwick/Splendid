{"version":3,"sources":["Splendid/model.ts","Splendid/GameMoves.ts","Splendid/SplendidGame.ts","Splendid/DevelopmentCards.tsx","Splendid/ResourceColors.ts","Splendid/Tokens.tsx","Splendid/MainBoard.tsx","Splendid/index.ts","Splendid/ai.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["ResourceType","NativeResourceTypes","Object","freeze","keys","filter","x","Wild","moves","collectMultipleResources","G","ctx","id","console","log","collectSingleResource","reserveDevelopmentCard","purchaseDevelopmentCard","SplendidGame","Game","setup","availableCards","Array","fill","map","_","idx","level","stock","visibleCards","resourceType","Diamond","cost","tokens","Onyx","Emerald","Ruby","Sapphire","availableTokens","Gold","Blue","Silver","Red","Black","players","name","isHuman","patrons","playedCards","prestigePoints","reservedCards","totalResources","flow","movesPerTurn","endGameIf","winners","length","winner","DevelopmentCardsSection","levels","onDevelopmentCardSelected","Grid","container","xs","spacing","key","row","DevelopmentCardRow","item","Box","display","flexDirection","Card","className","useCardStyle","card","makeStyles","cursor","margin","width","height","DevelopmentCard","props","onClick","JSON","stringify","ResourceColors","useTokenStyles","createStyles","token","backgroundColor","border","borderRadius","TokenStack","onResourceSelected","styles","TokensSection","flex","Model","type","useStyles","theme","root","flexGrow","paper","padding","textAlign","color","palette","text","secondary","PlayersPanel","PatronsSection","InventorySection","game","board","classes","rel","href","Container","Paper","Typography","variant","component","style","playerId","canAffordCard","currentPlayer","justify","currentPlayerTokens","selectedTokens","indexOf","splice","push","ai","AI","enumerate","Client","Splendid","Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89f07ffc.chunk.js","sourcesContent":["export interface GameContext {\n  allowedMoves: [];\n  currentPlayer;\n  turn: number;\n}\n\nexport enum ResourceType {\n  Wild = \"Wild\",\n  Emerald = \"Emerald\",\n  Sapphire = \"Sapphire\",\n  Ruby = \"Ruby\",\n  Diamond = \"Diamond\",\n  Onyx = \"Onyx\"\n}\n\nexport type ResourceTypes = keyof typeof ResourceType;\n\nexport const NativeResourceTypes = Object.freeze(\n  Object.keys(ResourceType).filter(x => x != ResourceType.Wild)\n);\n\nexport type ResourceCount = { [key in ResourceTypes]?: number | undefined };\n\nexport interface Resource {\n  readonly kind: ResourceType;\n}\n\nexport interface ResourceTotals {\n  tokens?: ResourceCount;\n  cards?: ResourceCount;\n}\n\nexport interface DevelopmentCard {\n  readonly id: string;\n  readonly level: number;\n  readonly cost: ResourceTotals;\n  readonly resourceType: ResourceType;\n  readonly prestigePoints: number;\n}\n\nexport interface Patron {\n  readonly name: string;\n  readonly cost: ResourceTotals;\n  readonly prestigePoints: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  isHuman: boolean;\n  patrons: Patron[];\n  playedCards: DevelopmentCard[];\n  reservedCards: DevelopmentCard[];\n  tokens: ResourceCount;\n  prestigePoints: number;\n  totalResources: ResourceTotals;\n}\n\nexport interface DevelopmentCardRow {\n  level: number;\n  stock: DevelopmentCard[];\n  visibleCards: DevelopmentCard[];\n}\n\nexport interface GameState {\n  availableCards: DevelopmentCardRow[];\n  availableTokens: ResourceCount;\n  players: Player[];\n  currentPlayerTokens: ResourceType[];\n}\n","import { GameContext, GameState } from \"./model\";\n\nexport type Moves = { [key in keyof typeof moves]: (...args) => void };\n\ninterface GameActionHandler {\n  (G: GameState, ctx: GameContext, ...args): any;\n}\n\nexport const moves: { [key: string]: GameActionHandler } = {\n  collectMultipleResources(G, ctx, id) {\n    console.log(`[collectMultipleResources]`);\n  },\n  collectSingleResource(G, ctx, id) {\n    console.log(`[collectSingleResource]`);\n  },\n  reserveDevelopmentCard(G, ctx, id) {\n    console.log(`[reserveDevelopmentCard]`);\n  },\n  purchaseDevelopmentCard(G, ctx, id) {\n    console.log(`[purchaseDevelopmentCard]`);\n  }\n};\n","import { Game } from \"boardgame.io/core\";\nimport { GameState, ResourceType, DevelopmentCard } from \"./model\";\nimport { moves } from \"./GameMoves\";\n\nexport const SplendidGame = Game<GameState>({\n  setup: () => ({\n    availableCards: [\n      ...Array(3)\n        .fill(0)\n        .map((_, idx) => idx + 1)\n        .map(level => ({\n          level,\n          stock: [],\n          visibleCards: [\n            {\n              id: `${level}1`,\n              level,\n              resourceType: ResourceType.Diamond,\n              cost: { tokens: { Onyx: 1 } }\n            },\n            {\n              id: `${level}2`,\n              level,\n              resourceType: ResourceType.Emerald,\n              cost: { tokens: { Ruby: 1 } }\n            },\n            {\n              id: `${level}3`,\n              level,\n              resourceType: ResourceType.Onyx,\n              cost: { tokens: { Sapphire: 1 } }\n            },\n            {\n              id: `${level}4`,\n              level,\n              resourceType: ResourceType.Ruby,\n              cost: { tokens: { Diamond: 1 } }\n            },\n            {\n              id: `${level}5`,\n              level,\n              resourceType: ResourceType.Sapphire,\n              cost: { tokens: { Emerald: 1 } }\n            }\n          ] as DevelopmentCard[]\n        }))\n    ],\n    availableTokens: {\n      Wild: 7,\n      Gold: 5,\n      Blue: 5,\n      Silver: 5,\n      Red: 5,\n      Black: 5\n    },\n    players: [\n      {\n        id: \"0\",\n        name: \"Jess\",\n        isHuman: false,\n        patrons: [],\n        playedCards: [],\n        tokens: {},\n        prestigePoints: 0,\n        reservedCards: [],\n        totalResources: {}\n      }\n    ]\n  }),\n\n  moves,\n\n  flow: {\n    movesPerTurn: 1,\n    endGameIf: G => {\n      const winners = G.players.filter(x => x.prestigePoints >= 15);\n\n      if (winners.length) {\n        return { winner: winners[0].id };\n      }\n    }\n  }\n});\n","import React from \"react\";\nimport * as Model from \"./model\";\nimport {\n  Grid,\n  Card,\n  Box,\n  Paper,\n  makeStyles,\n  createStyles\n} from \"@material-ui/core\";\nimport { ResourceColors } from \"./ResourceColors\";\n\ninterface DevelopmentCardsSectionProps extends OnDevelopmentCardSelected {\n  levels: Model.DevelopmentCardRow[];\n}\n\nexport const DevelopmentCardsSection: React.FC<\n  DevelopmentCardsSectionProps\n> = ({ levels, onDevelopmentCardSelected }) => (\n  <Grid container xs={12} spacing={2}>\n    {levels.map(x => (\n      <DevelopmentCardRow\n        key={`Level${x.level}`}\n        row={x}\n        onDevelopmentCardSelected={onDevelopmentCardSelected}\n      />\n    ))}\n  </Grid>\n);\n\ninterface OnDevelopmentCardSelected {\n  onDevelopmentCardSelected?(card: Model.DevelopmentCard): void;\n}\n\ninterface DevelopmentCardRowProps extends OnDevelopmentCardSelected {\n  row: Model.DevelopmentCardRow;\n}\n\nexport const DevelopmentCardRow: React.FC<DevelopmentCardRowProps> = ({\n  row: { level, stock, visibleCards },\n  onDevelopmentCardSelected\n}) => (\n  <Grid item xs={12} spacing={2}>\n    <Box display=\"flex\" flexDirection=\"row\">\n      <Card className={useCardStyle({}).card}>\n        <h2>LEVEL {level}</h2>\n        [STOCK: {stock.length}]\n      </Card>\n      {visibleCards.map(card => (\n        <DevelopmentCard\n          key={`${level}${card.id}`}\n          card={card}\n          onDevelopmentCardSelected={onDevelopmentCardSelected}\n        />\n      ))}\n    </Box>\n  </Grid>\n);\n\nconst useCardStyle = makeStyles({\n  card: {\n    cursor: \"pointer\",\n    margin: \"0px 10px\",\n    width: 120,\n    height: 150\n  }\n});\n\ninterface DevelopmentCardProps extends OnDevelopmentCardSelected {\n  card: Model.DevelopmentCard;\n}\n\nexport const DevelopmentCard: React.FC<DevelopmentCardProps> = props => (\n  <Card\n    className={useCardStyle(props).card}\n    onClick={() =>\n      props.onDevelopmentCardSelected\n        ? props.onDevelopmentCardSelected(props.card)\n        : false\n    }\n  >\n    [{props.card.resourceType}] ({JSON.stringify(props.card.cost)})\n  </Card>\n);\n","import { ResourceTypes } from \"./model\";\n\nexport const ResourceColors: { [key in ResourceTypes]: string } = {\n  Emerald: \"green\",\n  Diamond: \"silver\",\n  Onyx: \"black\",\n  Ruby: \"red\",\n  Sapphire: \"blue\",\n  Wild: \"gold\"\n};\n","import React from \"react\";\nimport * as Model from \"./model\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid, Box } from \"@material-ui/core\";\nimport { ResourceColors } from \"./ResourceColors\";\n\nconst useTokenStyles = makeStyles(() =>\n  createStyles({\n    token: {\n      backgroundColor: ({ resourceType }: TokenProps) =>\n        ResourceColors[resourceType],\n      border: \"1px solid #333\",\n      borderRadius: 40,\n      width: 80,\n      height: 80,\n      margin: \"10px auto\",\n      cursor: \"pointer\"\n    }\n  })\n);\n\ninterface TokenProps {\n  resourceType: Model.ResourceType;\n  onResourceSelected?(type: Model.ResourceType): void;\n}\n\nexport const TokenStack: React.FC<TokenProps> = props => {\n  const { resourceType, onResourceSelected } = props;\n  const styles = useTokenStyles(props);\n  return (\n    <div\n      onClick={() => onResourceSelected(resourceType)}\n      className={styles.token}\n    >\n      [{resourceType}]\n    </div>\n  );\n};\n\nexport const TokensSection: React.FC<{\n  onResourceSelected?(type: Model.ResourceType): void;\n}> = ({ onResourceSelected }) => (\n  <Box flex flexDirection=\"column\">\n    <Box>\n      {Model.NativeResourceTypes.map(type => (\n        <TokenStack\n          onResourceSelected={onResourceSelected}\n          resourceType={Model.ResourceType[type]}\n        />\n      ))}\n    </Box>\n  </Box>\n);\n","import React, { useState } from \"react\";\nimport { Moves } from \"./GameMoves\";\nimport { ResourceType, DevelopmentCard, GameState } from \"./model\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport { Grid, Paper, Typography, Container } from \"@material-ui/core\";\nimport { DevelopmentCardsSection } from \"./DevelopmentCards\";\nimport { TokensSection } from \"./Tokens\";\nimport { IBoardProps } from \"boardgame.io/react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      color: theme.palette.text.secondary\n    }\n  })\n);\n\nconst canAffordCard = (playerId: string, card: DevelopmentCard) =>\n  card && card.resourceType === ResourceType.Diamond;\n\nexport interface GameComponentProps extends IBoardProps<GameState> {\n  moves: Moves;\n}\n\nexport const MainBoard: React.FC<GameComponentProps> = props => {\n  const {\n    G,\n    ctx,\n    moves: {\n      collectMultipleResources,\n      collectSingleResource,\n      purchaseDevelopmentCard,\n      reserveDevelopmentCard\n    }\n  } = props;\n\n  const classes = useStyles(props);\n\n  const { availableCards } = G;\n\n  const onResourceSelected = (type: ResourceType) => {\n    G.currentPlayerTokens = G.currentPlayerTokens || [];\n    const selectedTokens = G.currentPlayerTokens;\n\n    if (selectedTokens.indexOf(type) > -1) {\n      collectSingleResource(type);\n      selectedTokens.splice(0, selectedTokens.length);\n      return;\n    } else if (selectedTokens.length === 2) {\n      collectMultipleResources(selectedTokens);\n      selectedTokens.splice(0, selectedTokens.length);\n      return;\n    }\n\n    selectedTokens.push(type);\n  };\n\n  const onDevelopmentCardSelected = (card: DevelopmentCard) =>\n    canAffordCard(ctx.currentPlayer, card)\n      ? purchaseDevelopmentCard(card)\n      : reserveDevelopmentCard(card);\n\n  return (\n    <>\n      <link\n        rel=\"stylesheet\"\n        href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n      />\n      <Container className={classes.root}>\n        <Grid container spacing={3}>\n          <Grid item xs={12}>\n            <Paper className={classes.paper}>\n              <Typography variant=\"h1\" component=\"h2\">\n                JSS DEMO\n              </Typography>\n            </Paper>\n          </Grid>\n\n          <Grid container xs={12} spacing={2}>\n            <Grid item xs={9}>\n              <Paper style={{ flexGrow: 1 }} className={classes.paper}>\n                <Grid container>\n                  <Grid item xs={10}>\n                    <PatronsSection />\n                    <DevelopmentCardsSection\n                      levels={availableCards}\n                      onDevelopmentCardSelected={onDevelopmentCardSelected}\n                    />\n                  </Grid>\n                  <Grid item xs={2} justify=\"center\">\n                    <TokensSection onResourceSelected={onResourceSelected} />\n                  </Grid>\n                </Grid>\n              </Paper>\n            </Grid>\n            <Grid item xs={3} justify=\"center\">\n              <Paper className={classes.paper}>\n                <PlayersPanel />\n              </Paper>\n            </Grid>\n          </Grid>\n          <Grid item xs={12}>\n            <Paper className={classes.paper}>\n              <InventorySection />\n            </Paper>\n          </Grid>\n        </Grid>\n      </Container>\n    </>\n  );\n};\n\nconst PlayersPanel: React.FC = () => <div>PLAYER INFO]</div>;\nconst PatronsSection: React.FC = () => <div>[PATRONS]</div>;\nconst InventorySection: React.FC = () => <div>[INVENTORY]</div>;\n","import { SplendidGame } from \"./SplendidGame\";\nimport { MainBoard } from \"./MainBoard\";\nimport ai from \"./ai\";\n\nexport default {\n  game: SplendidGame,\n  board: MainBoard,\n  ai\n};\n","import { AI } from \"boardgame.io/ai\";\n\nexport default AI({\n  enumerate: (G, ctx) => {\n    //   let moves = [];\n    //   for (let i = 0; i < 9; i++) {\n    //     if (G.cells[i] === null) {\n    //       moves.push({ move: \"clickCell\", args: [i] });\n    //     }\n    //   }\n    //   return moves;\n    return [];\n  }\n});\n","import { Client } from \"boardgame.io/react\";\nimport Splendid from \"./Splendid\";\n\nexport default Client(Splendid);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}