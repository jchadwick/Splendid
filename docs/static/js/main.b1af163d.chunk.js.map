{"version":3,"sources":["Model.ts","Splendid/game/moves/PlayerAction.ts","util/deckGenerator.ts","util/populateVisibleCards.ts","util/shuffle.ts","util/utils.ts","util/takeDevelopmentCard.ts","Splendid/game/moves/collectMultipleResources.ts","Splendid/game/moves/collectSingleResource.ts","Splendid/game/moves/purchaseDevelopmentCard.ts","Splendid/game/moves/reserveDevelopmentCard.ts","Splendid/game/moves/index.ts","Splendid/game/SplendidGame.ts","Splendid/game/initializeGame.ts","Splendid/board/MainBoard.tsx","Splendid/ai.ts","Splendid/AIVisualizer.tsx","Splendid/GameClient.tsx","Splendid/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["ResourceType","Object","freeze","keys","filter","x","map","NativeResourceTypes","Wild","PlayerActionCommand","action","JSON","stringify","name","this","__proto__","constructor","blueprints","split","line","length","level","resourceType","cost","prestigePoints","convertBlueprintsToDefinitions","blueprint","placeholders","resourceMap","reduce","idx","replacePlaceholders","source","replacements","replaced","placeholder","replace","RegExp","generateDeck","definitions","isValidDefinition","toDevelopmentCard","definition","isANumber","isResourceType","value","indexOf","input","min","max","parsed","Number","isNaN","id","parseCost","trim","totals","resource","isCard","endsWith","substr","costGroup","cards","tokens","populateVisibleCards","cardRows","forEach","row","visibleCards","stock","pop","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","createResourceCollection","bag","color","calculatePayment","required","available","availableCards","availableTokens","requiredCards","requiredTokens","availableWilds","availableCardsOfColor","availableTokensOfColor","requiredCardsOfColor","requiredTokensOfColor","remainingRequiredTokens","naturalTokenCost","wildCost","cardDeficit","hasRequiredResources","missingCards","requiresAdditionalResources","missingResources","target","some","key","add","toMerge","sum","assign","calculatePlayerResourceTotals","playedCards","calculateCardResources","cardResources","card","findCurrentPlayer","state","player","findPlayer","players","currentPlayerId","Error","playerId","find","takeDevelopmentCard","matchesCardId","isStockCard","visibleCardIndex","findIndex","isVisibleCard","reservedCards","push","CollectMultipleResourcesCommand","resources","getAvailableMoves","availableResources","type","actions","y","n","z","move","args","CollectSingleResourceCommand","PurchaseDevelopmentCardCommand","payment","INSUFFICIENT_FUNDS","from","isOnTable","reservedCard","UNAVAILABLE_CARD","deducted","splice","flatMap","accessibleCards","currentPlayer","playerResources","ReserveDevelopmentCardCommand","executeCommand","ctx","CommandType","execute","moves","collectMultipleResources","G","collectSingleResource","purchaseDevelopmentCard","reserveDevelopmentCard","SplendidGame","Game","setup","initial","deck","importDeck","Array","fill","Emerald","Onyx","Ruby","Sapphire","Diamond","numPlayers","_","String","isHuman","patrons","totalResources","flow","movesPerTurn","onTurnBegin","onTurnEnd","endGameIf","winners","rankings","sort","a","b","winner","console","log","moveNames","Column","styled","Box","display","flexDirection","Row","Overlay","position","top","left","width","height","isActive","zIndex","useStyles","makeStyles","createStyles","container","backgroundColor","fontFamily","gridColumnGap","gridRowGap","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","alignItems","justifyContent","fontSize","padding","fontWeight","board","playerList","alignContent","inventory","MainBoard","props","gameover","playerID","step","classes","userPlayerId","useState","selectedTokens","setSelectedTokens","userPlayer","otherPlayers","isUserPlayersTurn","useEffect","selectToken","useCallback","token","newSelectedTokens","debug","selectDevelopmentCard","onClose","results","className","itemProp","onClick","data-value","rowIndex","i","onSelected","isCurrentPlayer","onPlayReservedCard","GameOver","Dialog","open","aria-labelledby","DialogTitle","DialogContent","dividers","Typography","gutterBottom","DialogActions","Button","DevelopmentCard","canSelect","PlayerOverview","itemScope","itemType","itemID","dangerouslySetInnerHTML","__html","PlayedCard","PlayerInventory","flexWrap","CurrentPlayerName","writingMode","textOrientation","UserPlayerInventory","flexGrow","right","border","groupCards","paddingRight","grouped","group","objective","multiplier","calculateScore","weight","checker","score","Bot","iterations","playoutDepth","objectives","initialState","winGame","POSITIVE_INFINITY","targetState","increasePrestigePoints","MCTSBot","AI","bot","enumerate","cmd","visualize","MCTSVisualizer","style","transform","total","tok","GameClient","observer","settings","View","Client","game","ai","numberOfPlayers","multiplayer","musicVolume","sfxVolume","displayName","Boolean","window","location","hostname","match","ReactDOM","render","Splendid","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAMYA,E,gHAAAA,K,YAAAA,E,kBAAAA,E,oBAAAA,E,YAAAA,E,kBAAAA,E,aAAAA,M,KAWoCC,OAAOC,OACrDD,OAAOE,KAAKH,GACTI,OAAO,SAAAC,GAAC,MAAiB,kBAANA,IACnBC,IAAI,SAAAD,GAAC,OAAIL,EAAaK,MAHpB,IAMME,EAAsBN,OAAOC,OACxCD,OAAOE,KAAKH,GAAcI,OAAO,SAAAC,GAAC,OAAIA,IAAML,EAAaQ,QCXrCC,EAAtB,WAQE,WAA4BC,GAAY,yBAAZA,SAR9B,mDAEI,OAAOC,KAAKC,UAAU,CACpBC,KAAOC,KAAaC,UAAUC,YAAYH,KAC1CH,OAAQI,KAAKJ,aAJnB,K,QCFMO,EAAa,kwBAoBhBC,MAAM,MACNd,OAAO,SAAAe,GAAI,OAAIA,GAAQA,EAAKC,SAC5Bd,IAAI,SAAAa,GAAI,OAAIA,EAAKD,MAAM,OACvBZ,IACC,yCACG,CACCe,MAFJ,KAGIC,aAHJ,KAIIC,KAJJ,KAKIC,eALJ,QA6BEC,EAAiC,SACrCC,EACAC,GAIA,IAAMC,EAAcD,EAAaE,OAAO,SAACvB,EAAKD,EAAGyB,GAE/C,OADAxB,EAAID,GAAKE,EAAoBuB,GACtBxB,GACN,IAEH,OAAOoB,EAAUpB,IACf,gBAAGiB,EAAH,EAAGA,KAAMF,EAAT,EAASA,MAAOG,EAAhB,EAAgBA,eAAgBF,EAAhC,EAAgCA,aAAhC,MACG,CACCC,KAAMQ,EAAoBR,EAAMI,EAAcC,GAC9CP,MAAOA,EACPG,eAAgBA,EAChBF,aAAcM,EAAYN,OAK5BS,EAAsB,SAACC,EAAQL,EAAcM,GAAvB,OAC1BN,EAAaE,OACX,SAACK,EAAUC,GAAX,OACED,EAASE,QACP,IAAIC,OAAJ,WAAeF,EAAf,KAA+B,KAC/BF,EAAaE,KAEjBH,IAGSM,EAAe,SAACC,GAAD,OAC1BA,EAAYnC,OAAOoC,GAAmBlC,IAAImC,IAEtCD,EAAoB,SAACE,GAAD,OACxBA,KACEA,EAAWnB,MACboB,EAAUD,EAAWrB,MAAO,EAAG,IAC/BuB,EAAeF,EAAWpB,eAC1BqB,EAAUD,EAAWlB,eAAgB,EAAG,KAEpCoB,EAAiB,SAAAC,GAAK,OAAI5C,OAAOE,KAAKH,GAAc8C,QAAQD,IAAU,GAEtEF,EAAY,SAACI,EAAeC,EAAaC,GAA7B,OACdC,EACAC,OAAOJ,IADaI,OAAOC,MAAMF,IAAWA,GAAUF,GAAOE,GAAUD,EAAxE,IAACC,GAIET,EAAoB,SAAC,EAEzBY,GAFwB,IACtB9B,EADsB,EACtBA,KAAMF,EADgB,EAChBA,MAAOG,EADS,EACTA,eAAgBF,EADP,EACOA,aADP,MAGH,CACrB+B,GAAG,GAAD,OAAKA,EAAL,aAAYhC,EAAZ,YAAqBC,GACvBD,MAAO8B,OAAO9B,GACdC,aAActB,EAAasB,GAC3BC,KAAM+B,EAAU/B,GAChBC,eAAgB2B,OAAO3B,KAGnB8B,EAAY,SAAC/B,GAAD,OACfA,GAAQ,IACNL,MAAM,KACNZ,IAAI,SAAAD,GAAC,OAAIA,EAAEkD,SACX1B,OACC,SAAC2B,EAAQC,GACP,IAAMC,EAASD,EAASE,SAAS,QAE3BrC,EAAeoC,EACjBD,EAASG,OAAO,EAAGH,EAASrC,OAAS,OAAOA,QAC5CqC,EAEEI,EAAYL,EAAOE,EAAS,QAAU,UAG5C,OAFAG,EAAUvC,IAAiBuC,EAAUvC,IAAiB,GAAK,EAEpDkC,GAET,CAAEM,MAAO,GAAIC,OAAQ,MC3IdC,EAAuB,SAACC,GACnCA,EAASC,QAAQ,SAAAC,GACf,IAAK,IAAI9D,EAAI,EAAGA,EAAI8D,EAAIC,aAAahD,OAAQf,IAChB,MAAvB8D,EAAIC,aAAa/D,IAAmC,IAArB8D,EAAIE,MAAMjD,SAC3C+C,EAAIC,aAAa/D,GAAK8D,EAAIE,MAAMC,UCA3BC,EAAU,SAASC,GAK9B,IAJA,IACIC,EAAgBC,EADhBC,EAAeH,EAAMpD,OAIlB,IAAMuD,GAEXD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,GCqBIO,EAA2B,kBACtC9E,OAAOE,KAAKH,GAAc6B,OAExB,SAACmD,EAAKC,GAAN,OAAkBD,EAAIC,GAAS,EAAID,GACnC,KAYSE,EAAmB,SAC9BC,EACAC,GAEA,IAAMC,EAAkBD,GAAaA,EAAUtB,OAAU,GACnDwB,EAAmBF,GAAaA,EAAUrB,QAAW,GACrDwB,EAAiBJ,GAAYA,EAASrB,OAAU,GAChD0B,EAAkBL,GAAYA,EAASpB,QAAW,GAGpD0B,EAAiBH,EAAgBtF,EAAaQ,OAAS,EAEvDe,EAAO,CACTuC,MAAOiB,IACPhB,OAAQgB,KAXS,uBAcnB,YAAkBxE,EAAlB,+CAAuC,CAAC,IAA/B0E,EAA8B,QAC/BS,EAAwBL,EAAeJ,IAAU,EACjDU,EAAyBL,EAAgBL,IAAU,EACnDW,EAAuBL,EAAcN,IAAU,EAC/CY,EAAwBL,EAAeP,IAAU,EAGvD,GAAIW,EAAuBC,IAA0B,EAArD,CAYA,IAAIC,EAA0BD,EAQ9BC,GAJqBlB,KAAK5B,IACxB8C,EACAJ,GAMF,IAAMK,EAAmBnB,KAAK5B,IAC5B8C,EACAH,GAEFG,GAA2BC,EAG3B,IAAMC,EAAWpB,KAAK5B,IAAI8C,EAAyBL,IACnDK,GAA2BE,GAIG,EAC5BzE,EAAKwC,OAAOkB,IAAUa,GAGtBvE,EAAKwC,OAAOkB,IAAU1D,EAAKwC,OAAOkB,IAAU,GAAKc,EACjDxE,EAAKwC,OAAO/D,EAAaQ,OACtBe,EAAKwC,OAAO/D,EAAaQ,OAAS,GAAKwF,EAI1CP,GAAkBO,GAIpB,IAAMC,EAAcrB,KAAK3B,IACvB,EACA2C,EAAuBF,GAEzBnE,EAAKuC,MAAMmB,IAAU1D,EAAKuC,MAAMmB,IAAU,GAAKgB,IA3E9B,kFA8EnB,OAAO1E,GAGI2E,EAAuB,SAClCf,EACAC,GAEA,IAAM7D,EAAO6D,EAAYF,EAAiBC,EAAUC,GAAaD,EAC3DgB,EAAeC,EAA4B7E,EAAKuC,OAChDuC,EAAmBD,EAA4B7E,EAAKwC,QAC1D,QAASoC,GAAgBE,IAGrBD,EAA8B,SAACE,GAAD,OACxB,MAAVA,GAAyBrG,OAAOE,KAAKmG,GAAQC,KAAK,SAAAC,GAAG,OAAIF,EAAOE,GAAO,KAE5DC,EAAM,SACjBH,EACAI,GAFiB,OAIjBzG,OAAOE,KAAKuG,GAAS7E,OACnB,SAAC8E,EAAKrF,GAOJ,OANyB,MAArBqF,EAAIrF,GACNqF,EAAIrF,GAAgBqF,EAAIrF,GAAgBoF,EAAQpF,GAEhDqF,EAAIrF,GAAgBoF,EAAQpF,GAGvBqF,GAGT1G,OAAO2G,OAAO,GAAIN,GAAU,MAyCnBO,EAAgC,SAAC,GAAD,IAC3CC,EAD2C,EAC3CA,YAD2C,MAG9B,CACb/C,OAJ2C,EAE3CA,OAGAD,MAAOiD,EAAuBD,KAGnBC,EAAyB,SAACjD,GAAD,OACpCA,EAAMjC,OACJ,SAACmF,EAAeC,GAGd,OAFAD,EAAcC,EAAK3F,eAChB0F,EAAcC,EAAK3F,eAAiB,GAAK,EACrC0F,GAET,KAuBSE,EAAoB,SAACC,GAChC,IAAMC,EAASC,EAAWF,EAAMG,QAASH,EAAMI,iBAC/C,GAAc,MAAVH,EACF,MAAM,IAAII,MAAM,gCAElB,OAAOJ,GAGIC,EAAa,SACxBC,EACAG,GAFwB,OAIb,MAAXH,EAAkB,KAAOA,EAAQI,KAAK,SAAArH,GAAC,OAAIA,EAAEgD,KAAOoE,KCnQzCE,EAAsB,SACjCR,EACAF,GAEA,IAAMG,EAASF,EAAkBC,GAD9B,uBAGH,YAAgBA,EAAM9B,eAAtB,+CAAsC,CAAC,IAA9BlB,EAA6B,QAC9ByD,EAAgB,SAACvH,GAAD,OAAwBA,GAAKA,EAAEgD,KAAO4D,EAAK5D,IAG3DwE,EAAcD,EADCzD,EAAIE,MAAMF,EAAIE,MAAMjD,OAAS,IAG5C0G,EAAmB3D,EAAIC,aAAa2D,UAAUH,GAC9CI,EAAgBF,GAAoB,EAE1C,GAAID,EAGF,OAFA1D,EAAIE,MAAMC,WACV8C,EAAOa,cAAcC,KAAKjB,GAErB,GAAIe,EAGT,OAFA7D,EAAIC,aAAa0D,GAAoB,UACrCV,EAAOa,cAAcC,KAAKjB,IAlB3B,kFAuBH,MAAM,IAAIO,MAAJ,6BACkB7G,KAAKC,UACzBqG,GAFE,kDCjBKkB,EAAb,gLAGUhB,GAAmB,IAAD,uBACxB,YAAqBrG,KAAKJ,OAAO0H,UAAjC,+CAA4C,CAAC,IAApC3E,EAAmC,QAC1C0D,EAAM7B,gBAAgB7B,IACnB0D,EAAM7B,gBAAgB7B,IAAa,GAAK,EAE3CyD,EAAkBC,GAAOpD,OAAON,IAC7ByD,EAAkBC,GAAOpD,OAAON,IAAa,GAAK,GAN/B,kFASxB,OAAO0D,MAZX,GAAqD1G,GAAxC0H,EAeKE,kBAAoB,SAAClB,GACnC,IAAMmB,EAAqB/H,EAAoBH,OAC7C,SAAAmI,GAAI,OAAIpB,EAAM7B,gBAAgBiD,GAAQ,IACtCjI,IAAI,SAAAD,GAAC,OAAIL,EAAaK,KAGxB,GAAIiI,EAAmBlH,OAAS,EAAG,MAAO,GAG1C,IAAIoH,EAAwD,GATa,uBAWzE,IAXyE,IAWzE,EAXyE,iBAWhEnI,EAXgE,+BAYvE,IAZuE,IAYvE,EAZuE,iBAY9DoI,EAZ8D,+BAarE,YAAcH,EAAmBlI,OAAO,SAAAsI,GAAC,OAAIA,IAAMrI,GAAKqI,IAAMD,IAA9D,+CAAkE,CAAC,IAA1DE,EAAyD,QAChEH,EAAQN,KAAK,CAAC7H,EAAGoI,EAAGE,KAd+C,oFAYvE,EAAcL,EAAmBlI,OAAO,SAAAsI,GAAC,OAAIA,IAAMrI,IAAnD,+CAAwD,IAZe,oFAWzE,EAAciI,EAAd,+CAAmC,IAXsC,kFAmBzE,OAAOE,EAAQlI,IAAI,SAAA8H,GAAS,MAAK,CAC/BQ,KAAM,2BACNC,KAAM,CAACT,OCpCN,IAAMU,EAAb,gLAGU3B,GACNA,EAAM7B,gBAAgBxE,KAAKJ,OAAO+C,WAC/B0D,EAAM7B,gBAAgBxE,KAAKJ,OAAO+C,WAAa,GAAK,EAEvD,IAAM2D,EAASF,EAAkBC,GAKjC,OAHAC,EAAOrD,OAAOjD,KAAKJ,OAAO+C,WACvB2D,EAAOrD,OAAOjD,KAAKJ,OAAO+C,WAAa,GAAK,EAExC0D,MAZX,GAAkD1G,GAArCqI,EAeKT,kBAAoB,SAAClB,GAAD,OAClC5G,EAAoBH,OAAO,SAAAmI,GAAI,OAAIpB,EAAM7B,gBAAgBiD,IAAS,IAC/DjI,IAAI,SAAAD,GAAC,OAAIL,EAAaK,KACtBC,IAAI,SAAAmD,GAAQ,MAAK,CAAEmF,KAAM,wBAAyBC,KAAM,CAACpF,OCTzD,IAAMsF,EAAb,gLAQU5B,GACN,IAAMF,EAAOnG,KAAKJ,OAAOuG,KAEzB,GAAY,MAARA,EACF,MAAM,IAAIO,MAAM,iCAGlB,IAAMJ,EAASF,EAAkBC,GAE3B6B,EAAU9D,EACd+B,EAAK1F,KACLsF,EAA8BO,IAGhC,IAAKlB,EAAqB8C,GACxB,MAAM,IAAIxB,MAAMuB,EAA+BE,oBAGjD,IJlCF1H,EACA2H,EIiCQC,EAAYhC,EAAM9B,eAAekB,KAAK,SAAApC,GAAG,OAC7CA,EAAIC,aAAamC,KAAK,SAAAlG,GAAC,OAAIA,GAAKA,EAAEgD,KAAO4D,EAAK5D,OAG5C+F,EAAehC,EAAOa,cAAcP,KAAK,SAAArH,GAAC,OAAIA,EAAEgD,KAAO4D,EAAK5D,KAEhE,IAAK+F,IAAiBD,EACpB,MAAM,IAAI3B,MAAMuB,EAA+BM,kBAuBjD,OAnBAjC,EAAOrD,QJ7CTxC,EI6CyByH,EAAQjF,OJ5CjCmF,EI4CyC9B,EAAOrD,OJ1ChD9D,OAAOE,KAAKoB,GAAMM,OAChB,SAACyH,EAAUhI,GAOT,OAN8B,MAA1BgI,EAAShI,GACXgI,EAAShI,GAAgBgI,EAAShI,GAAgBC,EAAKD,GAEvDgI,EAAShI,IAAiBC,EAAKD,GAG1BgI,GAGTrJ,OAAO2G,OAAO,GAAIsC,GAAQ,MIkC1B/B,EAAM7B,gBAAkBmB,EAAIU,EAAM7B,gBAAiB0D,EAAQjF,QAGvDoF,IACFxB,EAAoBR,EAAOF,GAC3BmC,EAAenC,GAIjBG,EAAOa,cAAcsB,OAAOnC,EAAOa,cAAcnF,QAAQsG,GAAe,GAGxEhC,EAAON,YAAYoB,KAAKjB,GAExBG,EAAO5F,gBAAkB4F,EAAO5F,gBAAkB,GAAKyF,EAAKzF,eAErD2F,MAxDX,GAAoD1G,GAAvCsI,EAGKE,mBACd,sDAJSF,EAMKM,iBAAmB,gCANxBN,EA2DKV,kBAAoB,SAAClB,GACnC,IAAM/C,EAAe+C,EAAM9B,eAAemE,QAAQ,SAAAnJ,GAAC,OAAIA,EAAE+D,eACjD6D,EAAkBf,EAAkBC,GAApCc,cACFwB,EAAkB,sBAAIrF,GAAJ,YAAqB6D,IAAe7H,OAC1D,SAAAC,GAAC,OAAS,MAALA,IAGDqJ,EAAgBxC,EAAkBC,GAElCwC,EAAkC,CACtC5F,OAAQ2F,EAAc3F,OACtBD,MAAOiD,EAAuB2C,EAAc5C,cAO9C,OAJsB2C,EAAgBrJ,OAAO,SAAA6G,GAAI,OAC/Cf,EAAqBe,EAAK1F,KAAMoI,KAGbrJ,IAAI,SAAA2G,GAAI,MAAK,CAChC2B,KAAM,0BACNC,KAAM,CAAC5B,OCxFN,IAAM2C,EAAb,gLAGUzC,GACN,IAAMF,EAAOnG,KAAKJ,OAAOuG,KAEzB,GAAY,MAARA,EACF,MAAM,IAAIO,MAAM,gCAGlB,IAAMJ,EAASF,EAAkBC,GAWjC,OARIA,EAAM7B,gBAAgB9E,KAAO,IAC/B4G,EAAOrD,OAAOvD,MAAQ4G,EAAOrD,OAAOvD,MAAQ,GAAK,EACjD2G,EAAM7B,gBAAgB9E,MAAQ2G,EAAM7B,gBAAgB9E,MAAQ,GAAK,GAInEmH,EAAoBR,EAAOF,GAEpBE,MArBX,GAAmD1G,GAAtCmJ,EAwBKvB,kBAAoB,SAAClB,GAGnC,OAFeD,EAAkBC,GAEtBc,cAAc7G,QAAU,EAC1B,GAGF+F,EAAM9B,eACVmE,QAAQ,SAAAnJ,GAAC,OAAIA,EAAE+D,eACfhE,OAAO,SAAAC,GAAC,OAAS,MAALA,IACZC,IAAI,SAAA2G,GAAI,MAAK,CAAE2B,KAAM,yBAA0BC,KAAM,CAAC5B,OCnCtD,IAQD4C,EAAiB,SACrB1C,EACA2C,EACAC,EACAlB,GAGA,OADY,IAAIkB,EAAYlB,GACjBmB,QAAQ7C,IAmBN8C,EAhB4C,CACzDC,yBAA0B,SAACC,EAAGL,EAAK1B,GAAT,OACxByB,EAAeM,EAAGL,EAAK3B,EAAiC,CACtDC,eAGJgC,sBAAuB,SAACD,EAAGL,EAAKrG,GAAT,OACrBoG,EAAeM,EAAGL,EAAKhB,EAA8B,CAAErF,cAEzD4G,wBAAyB,SAACF,EAAGL,EAAK7C,GAAT,OACvB4C,EAAeM,EAAGL,EAAKf,EAAgC,CAAE9B,UAE3DqD,uBAAwB,SAACH,EAAGL,EAAK7C,GAAT,OACtB4C,EAAeM,EAAGL,EAAKF,EAA+B,CAAE3C,WClC/CsD,EAAeC,eAAuB,CACjDC,MCP4B,SAAAC,GAC5B,IAAMC,EX6CkB,WACxB,IAAMpI,EAAc,CAElB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,KACrB,CAAC,IAAK,IAAK,IAAK,IAAK,MACrBiH,QAAQ,SAAA7H,GAAY,OACpBF,EAA+BR,EAAYU,KAG7C,OAAOW,EAAaC,GWzDPqI,GAEbrG,EAAQoG,GAER,IAAMtF,EAAiB,CACrB,CACEhE,MAAO,EACPgD,MAAOsG,EAAKvK,OAAO,SAAAC,GAAC,OAAgB,IAAZA,EAAEgB,QAC1B+C,aAAcyG,MAAM,GAAGC,KAAK,OAE9B,CACEzJ,MAAO,EACPgD,MAAOsG,EAAKvK,OAAO,SAAAC,GAAC,OAAgB,IAAZA,EAAEgB,QAC1B+C,aAAcyG,MAAM,GAAGC,KAAK,OAE9B,CACEzJ,MAAO,EACPgD,MAAOsG,EAAKvK,OAAO,SAAAC,GAAC,OAAgB,IAAZA,EAAEgB,QAC1B+C,aAAcyG,MAAM,GAAGC,KAAK,QAIhC9G,EAAqBqB,GAyBrB,MAAO,CACLA,iBACAC,gBAXsB,CACtB9E,KAAM,EACNuK,QAAS,EACTC,KAAM,EACNC,KAAM,EACNC,SAAU,EACVC,QAAS,GAMT7D,QA1BcuD,MAAMH,EAAQU,YAC3BN,KAAK,GACLxK,IAAI,SAAC+K,EAAGhI,GAAJ,MAAY,CACfA,GAAIiI,OAAOjI,GACXxC,KAAK,UAAD,OAAYwC,EAAK,GACrBkI,SAAS,EACTC,QAAS,GACT1E,YAAa,GACb/C,OAAQ,GACRvC,eAAgB,EAChByG,cAAe,GACfwD,eAAgB,QD3BpBxB,QAEAyB,KAAM,CACJC,aAAc,EACdC,YAAa,SAACzB,EAAGL,GACfK,EAAE5C,gBAAkBuC,EAAIJ,eAE1BmC,UAAW,SAAC1B,EAAGL,GAEb9F,EAAqBmG,EAAE9E,iBAEzByG,UAAW,SAAC3B,GACV,IAAM4B,EAAU5B,EAAE7C,QAAQlH,OAAO,SAAAC,GAAC,OAAIA,EAAEmB,gBAAkB,KAE1D,GAAIuK,EAAQ3K,OAAQ,CAClB,IAAM4K,EAAW,YAAI7B,EAAE7C,SAAS2E,KAC9B,SAACC,EAAGC,GAAJ,OAAUA,EAAE3K,eAAiB0K,EAAE1K,iBAEjC,MAAO,CAAE4K,OAAQL,EAAQ,GAAIC,iBAMrCK,QAAQC,IAAR,iBAAsB/B,EAAagC,Y,0GEL7BC,GAASC,aAAOC,IAAPD,CAAY,CAAEE,QAAS,OAAQC,cAAe,WACvDC,GAAMJ,aAAOC,IAAPD,CAAY,CAAEE,QAAS,OAAQC,cAAe,QACpDE,GAAUL,aAAO,MAAPA,CAAc,CAC5BM,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAO,QACPC,OAAQ,gBAAGC,EAAH,EAAGA,SAAH,gBAA4CA,EAAW,IAAM,EAA7D,OACRC,OAAQ,MAGJC,GAAYC,YAAW,kBAC3BC,YAAa,CACXC,UAAW,CACTxI,MAAO,OACPyI,gBAAiB,OACjBC,WAAY,kDACZT,MAAO,qBACPC,OAAQ,QACRR,QAAS,OACTiB,cAAe,EACfC,WAAY,EACZC,oBAAqB,WACrBC,iBAAkB,gBAClBC,kBAAkB,uGAMpBjK,OAAQ,CACNkK,SAAU,SACVtB,QAAS,OACTuB,WAAY,SACZC,eAAgB,eAEhB,uBAAwB,CACtBxB,QAAS,OACTC,cAAe,SACfwB,SAAU,QAGZ,6CAA8C,GAE9C,0CAA2C,CACzCrB,SAAU,WACVsB,QAAS,OACTD,SAAU,MACVE,WAAY,KAGd,kEAAmE,CACjErJ,MAAO,SAIXsJ,MAAO,CACLN,SAAU,QACVI,QAAS,iBAGXG,WAAY,CACV7B,QAAS,OACTC,cAAe,SACf6B,aAAc,SACdR,SAAU,cACVP,gBAAiB,OACjBW,QAAS,SAGXK,UAAW,CACTT,SAAU,YACVtB,QAAS,YAKFgC,GAET,SAAAC,GAAU,IAEPzH,EAMDyH,EANFzE,EAFS,EAQPyE,EALFzE,EAAK9E,EAHI,EAGJA,eAAgBC,EAHZ,EAGYA,gBAAiBiC,EAH7B,EAG6BA,gBAAiBD,EAH9C,EAG8CA,QAChDuH,EAILD,EAJF9E,IAAO+E,SACPC,EAGEF,EAHFE,SACA7E,EAEE2E,EAFF3E,MACA8E,EACEH,EADFG,KAGIC,EAAU1B,GAAU,IAEpB2B,EAAeH,GAAYxH,EAAQ,GAAGjE,GAZjC,EAciC6L,mBAAS,IAd1C,mBAcJC,EAdI,KAcYC,EAdZ,KAeL1F,EAAgBxC,EAAkBC,GAClCkI,EAAqBhI,EAAWC,EAAS2H,GACzCK,EAAehI,EAAQlH,OAAO,SAAAC,GAAC,OAAIA,EAAEgD,KAAO4L,IAC5CM,EAAoBN,IAAiB1H,EAE3CiI,oBAAU,WACJjI,IAAoB0H,GACtBF,KAED,CAACA,EAAMxH,EAAiB0H,IAE3B,IAAMQ,EAAcC,sBAClB,SAAAC,GACE,GAAIA,IAAU3P,EAAaQ,KAA3B,CAKA,IAAIoP,EAAoBT,EAEpBA,EAAerM,QAAQ6M,IAAU,EACL,IAA1BR,EAAe/N,QACjB6I,EAAMG,sBAAsBuF,GAC5BC,EAAoB,IAEpBvD,QAAQwD,MAAR,kDAAyDF,IAG3DC,EAAiB,sBAAOT,GAAP,CAAuBQ,IAGT,IAA7BC,EAAkBxO,SACpB6I,EAAMC,yBAAyB0F,GAC/BA,EAAoB,IAGtBR,EAAkBQ,QAtBhBvD,QAAQwD,MAAR,+CAwBJ,CAAC5F,EAAOkF,IAGJW,EAAwB,SAAC7I,GAC7B,IAAM0C,EAAkB9C,EAA8B6C,GAElDxD,EAAqBe,EAAK1F,KAAMoI,GAClCM,EAAMI,wBAAwBpD,GAE9BgD,EAAMK,uBAAuBrD,IAIjC,OACE,oCACG4H,GACC,kBAAC,GAAD,CACEkB,QAAS,kBAAM1D,QAAQC,IAAI,oBAC3B0D,QAASnB,EACTQ,WAAYA,IAGhB,kBAACvC,GAAD,CAASM,UAAWmC,IACpB,yBAAKlM,GAAG,YAAY4M,UAAWjB,EAAQvB,WACrC,yBAAKpK,GAAG,SAAS4M,UAAWjB,EAAQjL,QACjC9D,OAAOE,KAAKmF,GAAiBhF,IAAI,SAAAqP,GAAK,OACrC,yBACEnJ,IAAKmJ,EACLO,SAAS,QACTC,QAAS,kBAAMV,EAAYE,KAE3B,yBAAKO,SAAS,WAAWE,aAAYT,IACrC,yBAAKO,SAAS,QAAQE,aAAY9K,EAAgBqK,SAIxD,yBAAKtM,GAAG,QAAQ4M,UAAWjB,EAAQT,OAChClJ,EAAe/E,IAAI,SAAC6D,EAAKkM,GAAN,OAClB,yBAAK7J,IAAK8E,OAAO+E,GAAWJ,UAAU,WACpC,yBACEA,UAAU,0BACVE,QAAS,mBACPhM,EAAIE,MAAMjD,QACN0O,EAAsB3L,EAAIE,MAAMF,EAAIE,MAAMjD,OAAS,MAIzD,8BAAO+C,EAAIE,MAAMjD,SAElByJ,MAAM,GACJC,KAAK,GACLxK,IACC,SAAC+K,EAAGiF,GAAJ,OACEnM,EAAIC,aAAakM,IAChB,CAAEjN,GAAI,QAEV/C,IAAI,SAAC2G,EAAMnF,GAAP,OACH,kBAAC,GAAD,CACE0E,IAAKS,EAAK5D,IAAL,UAAcc,EAAI9C,OAAlB,OAA0BS,GAC/BmF,KAAMA,EACNsJ,WAAYT,UAMxB,yBAAKzM,GAAG,cAAc4M,UAAWjB,EAAQR,YACtCc,EAAahP,IAAI,SAAC8G,GAAD,OAChB,kBAAC,GAAD,CACEZ,IAAKY,EAAO/D,GACZmN,gBAAiBpJ,IAAWsC,EAC5BtC,OAAQA,MAGZ,yBAAK6I,UAAS,aACZ,yBAAKA,UAAU,eACb,yCAEF,yBAAKA,UAAU,eACb,yCAEF,yBAAKA,UAAU,eACb,yCAEF,yBAAKA,UAAU,eACb,yCAEF,yBAAKA,UAAU,eACb,2CAIN,yBAAK5M,GAAG,YAAY4M,UAAWjB,EAAQN,WACpCW,GACC,kBAAC,GAAD,CACEmB,gBAAiBnB,EAAWhM,KAAOkE,EACnCH,OAAQiI,EACRoB,mBAAoB,SAAAxJ,GAAI,OAAIgD,EAAMI,wBAAwBpD,UAelEyJ,GAAW,SAAC,GAAD,IAAGV,EAAH,EAAGA,QAASD,EAAZ,EAAYA,QAASV,EAArB,EAAqBA,WAArB,OACf,kBAACsB,EAAA,EAAD,CAAQC,MAAI,EAACb,QAASA,EAASc,kBAAgB,2BAC7C,kBAACC,EAAA,EAAD,kBACA,kBAACC,EAAA,EAAD,CAAeC,UAAQ,GACrB,kBAACC,EAAA,EAAD,CAAYC,cAAY,GACrBlB,EAAQ5D,SAAWiD,EAClB,kBAAC4B,EAAA,EAAD,iBAEA,kBAACA,EAAA,EAAD,yCAIN,kBAACE,GAAA,EAAD,KACE,kBAACC,GAAA,EAAD,CAAQjB,QAASJ,EAAS9K,MAAM,WAAhC,eAOAoM,GAAkB,SAAC,GAAD,IACtBpK,EADsB,EACtBA,KACAsJ,EAFsB,EAEtBA,WACAe,EAHsB,EAGtBA,UAHsB,OAStB,yBACErB,UAAS,eAAUhJ,EAAK5D,IAAMiO,EAAY,eAAiB,IAC3DpB,SAAS,OACTC,QAAS,oBAAOlJ,EAAK5D,KAAMiO,IAAYf,EAAWtJ,KAElD,yBAAKiJ,SAAS,WAAWE,aAAYnJ,EAAK3F,eACzC2F,GAAQA,EAAKzF,eAAiB,GAC7B,yBAAK0O,SAAS,iBAAiBE,aAAYnJ,EAAKzF,iBAElD,yBAAK0O,SAAS,QACXjJ,GACCA,EAAK1F,MACLtB,OAAOE,KAAK8G,EAAK1F,KAAKwC,QAAQzD,IAAI,SAAAmD,GAAQ,OACxC,yBAAK+C,IAAK/C,EAAUyM,SAAS,SAC3B,yBAAKA,SAAS,WAAWE,aAAY3M,IACrC,yBAAKyM,SAAS,QAAQE,aAAYnJ,EAAK1F,KAAKwC,OAAON,WAOzD8N,GAAiB,SAAC,GAAD,IACrBf,EADqB,EACrBA,gBACApJ,EAFqB,EAErBA,OAFqB,OAOrB,yBACE6I,UAAS,iBAAYO,GAAmB,UACxCgB,WAAS,EACTC,SAAS,eACTC,OAAQpG,OAAOlE,EAAO/D,KAEtB,yBAAK6M,SAAS,QACX9I,EAAOvG,KAAM,IACb2P,GACC,0BAAMmB,wBAAyB,CAAEC,OAAQ,aAG7C,yBAAK1B,SAAS,kBAAkB9I,EAAO5F,gBACvC,yBAAKyO,UAAU,aACb,kBAAC,GAAD,CAAiB7I,OAAQA,OAazByK,GAAa,SAAC,GAAD,IAAG5K,EAAH,EAAGA,KAAH,OACjB,kBAACyF,EAAA,EAAD,CAAKQ,MAAM,MAAMC,OAAO,OACtB,yBAAK+C,SAAS,WAAWE,aAAYnJ,EAAK3F,eAC1C,yBAAK4O,SAAS,iBAAiBE,aAAYnJ,EAAKzF,mBAI9CsQ,GAAkB,SAAC,GAAD,QACtB1K,OAAUN,EADY,EACZA,YAAamB,EADD,EACCA,cAAelE,EADhB,EACgBA,OADhB,OAGtB,yBAAKmM,SAAS,aACZ,kBAACrD,GAAD,CAAKsB,eAAe,gBAAgB4D,SAAS,QAC3C,kBAACvF,GAAD,CAAQG,QAAQ,OAAO8B,aAAa,SAASN,eAAe,UACzDlG,EAAc7G,QAEhB0F,EAAYxG,IAAI,SAAA2G,GAAI,OACnB,kBAAC,GAAD,CAAYA,KAAMA,OAGtB,yBAAKgJ,UAAU,UACb,yBAAKA,UAAU,YAAf,UAEChQ,OAAOE,KAAK4D,GAAQzD,IACnB,SAAAmD,GAAQ,OACNM,EAAON,GAAY,GACjB,yBAAK+C,IAAK/C,EAAUyM,SAAS,SAC3B,yBAAKA,SAAS,WAAWE,aAAY3M,IACrC,yBAAKyM,SAAS,QAAQE,aAAYrM,EAAON,WAQjDuO,GAAoBvF,aAAO,KAAPA,CAAa,CACrCwF,YAAa,cACbC,gBAAiB,YAGbC,GAAsB,SAAC,GAAD,IAC1B3B,EAD0B,EAC1BA,gBACApJ,EAF0B,EAE1BA,OACAqJ,EAH0B,EAG1BA,mBAH0B,OAS1B,kBAAC5D,GAAD,CAAKE,SAAS,WAAWqF,SAAU,EAAGnC,UAAWO,GAAmB,UAClE,kBAAC9D,EAAA,EAAD,CAAKuD,UAAU,iBAAiBlD,SAAS,WAAWC,IAAI,OAAOqF,MAAM,QAClEjL,EAAO5F,gBAEV,kBAACwQ,GAAD,KAAoB5K,EAAOvG,MAC3B,kBAACgM,GAAD,KACE,kBAACA,GAAD,CAAKyF,OAAO,kBACV,kBAACzF,GAAD,CAAKxJ,GAAG,eAAe+K,SAAS,OAAO2D,SAAS,OAAO7E,MAAM,QAC1DjN,OAAOE,KAAKiH,EAAOrD,QAAQzD,IAC1B,SAAAmD,GAAQ,OACN2D,EAAOrD,OAAON,GAAY,GACxB,yBAAK+C,IAAK/C,EAAUyM,SAAS,SAC3B,yBAAKA,SAAS,WAAWE,aAAY3M,IACrC,yBAAKyM,SAAS,QAAQE,aAAYhJ,EAAOrD,OAAON,SAK1D,kBAACoJ,GAAD,CAAKxJ,GAAG,iBACL+D,EAAOa,cAAc3H,IAAI,SAAA2G,GAAI,OAC5B,kBAAC,GAAD,CACET,IAAKS,EAAK5D,GACV4D,KAAMA,EACNsJ,WAAYE,QAKpB,kBAAC5D,GAAD,KACE,kBAACA,GAAD,CAAKxJ,GAAG,eACLkP,GAAWnL,EAAON,aAAaxG,IAAI,gBAAGgB,EAAH,EAAGA,aAAcwC,EAAjB,EAAiBA,MAAjB,OAClC,kBAAC4I,EAAA,EAAD,CACEuD,UAAS,oBAAe3O,GACxByL,SAAS,WACTG,MAAM,OAELpJ,EAAMxD,IAAI,SAAC2G,EAAMnF,GAAP,OACT,kBAAC4K,EAAA,EAAD,CACEK,SAAS,WACTC,IAAG,UAAW,EAANlL,EAAL,MACHoL,MAAM,MACNsF,aAAa,OAEb,kBAAC,GAAD,CACEhM,IAAKS,EAAK5D,GACV4D,KAAMA,EACNsJ,WAAY,kBAAM,mBAiBhCgC,GAAa,SAACzO,GAAD,OACjBA,EAAMjC,OAAO,SAAC4Q,EAAiCxL,GAAU,IAC/C3F,EAAiB2F,EAAjB3F,aACJoR,EAAQD,EAAQ/K,KAAK,SAAArH,GAAC,OAAIA,EAAEiB,eAAiBA,IAQjD,OANa,MAAToR,EACFD,EAAQvK,KAAK,CAAE5G,eAAcwC,MAAO,CAACmD,KAErCyL,EAAM5O,MAAMoE,KAAKjB,GAGZwL,GACN,K,wPC3dL,IAAME,GAAY,SAChBC,EACAC,GAFgB,MAGZ,CACJC,OAAQ,EACRC,QAAS,SAAS5L,GAChB,IAAM6L,EAAQH,EAAe1L,GAE7B,OADArG,KAAKgS,OAASE,EAAQJ,EACf9R,KAAKgS,OAAS,KAInBG,G,YACJ,WAAYpK,GAAO,qE,wVAAA,IAEZA,EAFW,CAGdqK,WAAY,IACZC,aAAc,IACdC,WAAY,SACVC,EACAhI,EACA5D,GAEA,IAAKA,EAAU,MAAO,GAEtB,IAAML,EAASC,EAAWgM,EAAa/L,QAASG,GAEhD,MAAO,CACL6L,QAASX,GACPxP,OAAOoQ,kBACP,SAACC,GAAD,OACEnM,EAAWmM,EAAYlM,QAASG,GAAUjG,gBAAkB,GACxD,EACA,IAERiS,uBAAwBd,GACtB,GACA,SAACa,GAAD,OACEnM,EAAWmM,EAAYlM,QAASG,GAAUjG,eAC1C4F,EAAO5F,uB,2BA3BHkS,YAmCHC,iBAAG,CAChBC,IAAKX,GACLY,UJ9C+B,SAAC1M,GAAD,MAC/B,CACEgB,EACAW,EACAC,EACAa,GACAJ,QAAQ,SAAAsK,GAAG,OAAIA,EAAIzL,kBAAkBlB,MIyCvC4M,UAAWC,0BCtDe,SAAC,GAA6B,IAA3B7J,EAA0B,EAA1BA,EACvB/C,EAASF,EAAkBiD,GAEjC,OAAiB,MAAV/C,EAAiB,KACtB,yBAAK6M,MAAO,CAAEC,UAAW,eACvB,+BACE,4BACE,wCACA,4BAAK9M,EAAO5F,iBAEd,4BACE,qCACA,kCACM4F,EAAON,YADb,SACgCM,EAAOa,gBAGzC,4BACE,sCACA,4BACGhI,OAAOE,KAAKiH,EAAOrD,QAAQlC,OAC1B,SAACsS,EAAOC,GAAR,OAAiBD,EAAS/M,EAAOrD,OAAOqQ,IACxC,W,SCJCC,GAbIC,aAAqC,YAAmB,IAAhBC,EAAe,EAAfA,SACnDC,EAAOC,iBAAO,CAClBC,OACAnG,SACAoG,MACAvJ,WAAYmJ,EAASK,gBACrBC,YAAaN,EAASM,YACtBhF,MAAO0E,EAAS1E,QAGlB,OAAO,kBAAC2E,EAAD,QCdHjK,GAAe+J,aAAS,WAC5B,OACE,kBAAC,GAAD,CACEC,SAAU,CACRK,gBAAiB,EACjBE,YAAa,EACbC,UAAW,EACXzN,QAAS,QAKjBiD,GAAayK,YAAc,eAEZzK,UCNK0K,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBCHD,kBAAM,kBAACC,GAAD,ODGL,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.b1af163d.chunk.js","sourcesContent":["export interface GameContext {\n  allowedMoves: [];\n  currentPlayer: string;\n  turn: number;\n}\n\nexport enum ResourceType {\n  Wild = \"Wild\",\n  Emerald = \"Emerald\",\n  Sapphire = \"Sapphire\",\n  Ruby = \"Ruby\",\n  Diamond = \"Diamond\",\n  Onyx = \"Onyx\"\n}\n\nexport type ResourceTypes = keyof typeof ResourceType;\n\nexport const AllResourceTypes: ResourceType[] = Object.freeze(\n  Object.keys(ResourceType)\n    .filter(x => typeof x === \"string\")\n    .map(x => ResourceType[x] as ResourceType)\n) as ResourceType[];\n\nexport const NativeResourceTypes = Object.freeze(\n  Object.keys(ResourceType).filter(x => x !== ResourceType.Wild)\n);\n\nexport type ResourceCount = { [key in ResourceTypes]?: number | undefined };\n\nexport interface Resource {\n  readonly kind: ResourceType;\n}\n\nexport interface ResourceTotals {\n  tokens?: ResourceCount;\n  cards?: ResourceCount;\n}\n\nexport interface DevelopmentCard {\n  readonly id: string;\n  readonly level: number;\n  readonly cost: ResourceTotals;\n  readonly resourceType: ResourceType;\n  readonly prestigePoints: number;\n}\n\nexport interface Patron {\n  readonly name: string;\n  readonly cost: ResourceTotals;\n  readonly prestigePoints: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  isHuman: boolean;\n  patrons: Patron[];\n  playedCards: DevelopmentCard[];\n  reservedCards: DevelopmentCard[];\n  tokens: ResourceCount;\n  prestigePoints: number;\n}\n\nexport interface DevelopmentCardRow {\n  level: number;\n  stock: DevelopmentCard[];\n  visibleCards: DevelopmentCard[];\n}\n\nexport interface GameState {\n  availableCards: DevelopmentCardRow[];\n  availableTokens: ResourceCount;\n  players: Player[];\n  currentPlayerId: string;\n}\n\nexport interface GameResults {\n  winner: Player;\n  rankings: Player[];\n}\n","import { GameState } from \"../../../Model\";\nimport { moves } from \"./index\";\n\nexport interface PlayerAction {}\n\ntype PlayerActionCommandType = typeof PlayerActionCommand;\n\nexport type AvailableMove = { move: keyof typeof moves; args: any[] };\n\nexport interface PlayerActionCommandStatic extends PlayerActionCommandType {\n  getAvailableMoves(gameState: GameState): AvailableMove[];\n}\n\nexport abstract class PlayerActionCommand<T = any> {\n  hash(): string {\n    return JSON.stringify({\n      name: (this as any).__proto__.constructor.name,\n      action: this.action\n    });\n  }\n\n  constructor(public readonly action: T) {}\n  abstract execute(gameState: GameState): GameState;\n}\n","import {\n  DevelopmentCard,\n  ResourceType,\n  ResourceTotals,\n  NativeResourceTypes\n} from \"../Model\";\n\n/*\n    CSV file contains the definitions for ONE color,\n    so use this as a blueprint to loop through all the colors\n  */\nconst blueprints = `\n1,E,{A} & {B} & {B},0\n1,E,{A} & {A} & {C} & {C},0\n1,E,{C} & {C} & {C},0\n1,E,{A} & {B} & {C} & {D},0\n1,E,{A} & {C} & {C} & {D} & {D},0\n1,E,{A} & {B} & {C} & {D} & {D},0\n1,E,{D} & {D} & {D} & {D},1\n\n2,E,{D} & {D} & {D} & {A} & {A} & {B} & {B}, 1\n2,E,{E} & {E} & {C} & {C} & {C} & {B} & {B} & {B}, 1\n2,E,{B} & {B} & {B} & {B} & {D} & {A} & {A}, 2\n2,E,{B} & {B} & {B} & {B} & {B}, 2\n2,E,{B} & {B} & {B} & {B} & {B} & {A} & {A} & {A}, 2\n2,E,{E} & {E} & {E} & {E} & {E} & {E}, 3\n\n3,E,{C} & {C} & {C} & {D} & {D} & {D} & {A} & {A} & {A} & {B} & {B} & {B} & {B} & {B},3\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E} & {B} & {B} & {B},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E},5`\n  .split(/\\n/)\n  .filter(line => line && line.length)\n  .map(line => line.split(\",\"))\n  .map(\n    ([level, resourceType, cost, prestigePoints]) =>\n      ({\n        level,\n        resourceType,\n        cost,\n        prestigePoints\n      } as DevelopmentCardDefinition)\n  );\n\ntype DevelopmentCardDefinition = {\n  [key in keyof Omit<DevelopmentCard, \"id\">]: string;\n};\n\nexport const importDeck = () => {\n  const definitions = [\n    // matrix containing all variations of the placeholders coming first\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\", \"E\", \"A\"],\n    [\"C\", \"D\", \"E\", \"A\", \"B\"],\n    [\"D\", \"E\", \"A\", \"B\", \"C\"],\n    [\"E\", \"A\", \"B\", \"C\", \"D\"]\n  ].flatMap(placeholders =>\n    convertBlueprintsToDefinitions(blueprints, placeholders)\n  );\n\n  return generateDeck(definitions);\n};\n\n/** Generates the set of cards from the blueprint for a single resource */\nconst convertBlueprintsToDefinitions = (\n  blueprint,\n  placeholders\n): DevelopmentCardDefinition[] => {\n  // create the mapping from placeholders to their actual values,\n  // e.g. \"A\" -> \"Gold\", \"B\" -> \"Silver\", etc.\n  const resourceMap = placeholders.reduce((map, x, idx) => {\n    map[x] = NativeResourceTypes[idx];\n    return map;\n  }, {});\n\n  return blueprint.map(\n    ({ cost, level, prestigePoints, resourceType }) =>\n      ({\n        cost: replacePlaceholders(cost, placeholders, resourceMap),\n        level: level,\n        prestigePoints: prestigePoints,\n        resourceType: resourceMap[resourceType]\n      } as DevelopmentCardDefinition)\n  );\n};\n\nconst replacePlaceholders = (source, placeholders, replacements) =>\n  placeholders.reduce(\n    (replaced, placeholder) =>\n      replaced.replace(\n        new RegExp(`{${placeholder}}`, \"g\"),\n        replacements[placeholder]\n      ),\n    source\n  );\n\nexport const generateDeck = (definitions: DevelopmentCardDefinition[]) =>\n  definitions.filter(isValidDefinition).map(toDevelopmentCard);\n\nconst isValidDefinition = (definition: DevelopmentCardDefinition) =>\n  definition &&\n  !!definition.cost &&\n  isANumber(definition.level, 1, 3) &&\n  isResourceType(definition.resourceType) &&\n  isANumber(definition.prestigePoints, 0, 10);\n\nconst isResourceType = value => Object.keys(ResourceType).indexOf(value) > -1;\n\nconst isANumber = (input: string, min: number, max: number) =>\n  ((parsed: number) => !Number.isNaN(parsed) && parsed >= min && parsed <= max)(\n    Number(input)\n  );\n\nconst toDevelopmentCard = (\n  { cost, level, prestigePoints, resourceType }: DevelopmentCardDefinition,\n  id: number\n): DevelopmentCard => ({\n  id: `${id}_L${level}_${resourceType}`,\n  level: Number(level),\n  resourceType: ResourceType[resourceType],\n  cost: parseCost(cost),\n  prestigePoints: Number(prestigePoints)\n});\n\nconst parseCost = (cost: string): ResourceTotals =>\n  (cost || \"\")\n    .split(\"&\")\n    .map(x => x.trim())\n    .reduce(\n      (totals, resource) => {\n        const isCard = resource.endsWith(\"Card\");\n\n        const resourceType = isCard\n          ? resource.substr(0, resource.length - \"Card\".length)\n          : resource;\n\n        const costGroup = totals[isCard ? \"cards\" : \"tokens\"];\n        costGroup[resourceType] = (costGroup[resourceType] || 0) + 1;\n\n        return totals;\n      },\n      { cards: {}, tokens: {} } as ResourceTotals\n    );\n","import { DevelopmentCardRow } from \"../Model\";\n\nexport const populateVisibleCards = (cardRows: DevelopmentCardRow[]) => {\n  cardRows.forEach(row => {\n    for (let x = 0; x < row.visibleCards.length; x++) {\n      if (row.visibleCards[x] == null && row.stock.length !== 0) {\n        row.visibleCards[x] = row.stock.pop();\n      }\n    }\n  });\n};\n","/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nexport const shuffle = function(array) {\n  var currentIndex = array.length;\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import {\n  ResourceTotals,\n  Resource,\n  ResourceType,\n  ResourceCount,\n  ResourceTypes,\n  NativeResourceTypes,\n  DevelopmentCard,\n  Player,\n  GameState\n} from \"../Model\";\n\nexport const deduct = (\n  cost: ResourceCount,\n  from: ResourceCount\n): ResourceCount =>\n  Object.keys(cost).reduce(\n    (deducted, resourceType) => {\n      if (deducted[resourceType] != null) {\n        deducted[resourceType] = deducted[resourceType] - cost[resourceType];\n      } else {\n        deducted[resourceType] = -cost[resourceType];\n      }\n\n      return deducted;\n    },\n    // clone the input\n    Object.assign({}, from || {}) as ResourceCount\n  );\n\nexport const getGemCount = (\n  tokens: (Resource | ResourceType | ResourceTypes)[]\n): ResourceCount =>\n  Object.keys(ResourceType).reduce((counts, color) => {\n    const total = tokens\n      .map(x => (typeof x === \"string\" ? color : x.kind))\n      .filter(x => x === color).length;\n\n    counts[color] = (counts[color] == null ? 0 : counts[color]) + total;\n\n    return counts;\n  }, {}) as ResourceCount;\n\nexport const createResourceCollection = (): ResourceCount =>\n  Object.keys(ResourceType).reduce(\n    // eslint-disable-next-line\n    (bag, color) => ((bag[color] = 0), bag),\n    {} as ResourceCount\n  );\n\n/**\n * Determines what a player will have to pay in order to purchase an item\n *\n * @param required the item's cost\n * @param available the resources currently available\n *\n * @returns the set of resources that will satisfy the required cost\n * Any resource requirements that can't be met will be identified with a negative cost\n */\nexport const calculatePayment = (\n  required: ResourceTotals,\n  available: ResourceTotals\n): ResourceTotals => {\n  const availableCards = (available && available.cards) || {};\n  const availableTokens = (available && available.tokens) || {};\n  const requiredCards = (required && required.cards) || {};\n  const requiredTokens = (required && required.tokens) || {};\n\n  // store this outside so we can keep track as we use them\n  let availableWilds = availableTokens[ResourceType.Wild] || 0;\n\n  let cost = {\n    cards: createResourceCollection(),\n    tokens: createResourceCollection()\n  };\n\n  for (let color of NativeResourceTypes) {\n    const availableCardsOfColor = availableCards[color] || 0;\n    const availableTokensOfColor = availableTokens[color] || 0;\n    const requiredCardsOfColor = requiredCards[color] || 0;\n    const requiredTokensOfColor = requiredTokens[color] || 0;\n\n    // Don't waste time figuring out how to pay for things that aren't required\n    if (requiredCardsOfColor + requiredTokensOfColor === 0) {\n      continue;\n    }\n\n    /* Example:\n        Required: 3 Emeralds\n        Available Cards: 1 Emerald\n        Available Tokens: 1 Emerald, 1 Wild\n        == Cost:  1 Emerald, 1 Wild\n      */\n\n    // e.g. 3 Emeralds\n    let remainingRequiredTokens = requiredTokensOfColor;\n\n    // factor in the cards we have (i.e. tokens we get for \"free\");\n    // e.g. 3 Emeralds - 1 Emerald card = 2 Emeralds still required\n    const cardDiscount = Math.min(\n      remainingRequiredTokens,\n      availableCardsOfColor\n    );\n    remainingRequiredTokens -= cardDiscount;\n\n    // how many natural tokens do we have that we can use?\n    // e.g. 2 Emeralds - 1 Emerald token = 1 Emerald still required\n    const naturalTokenCost = Math.min(\n      remainingRequiredTokens,\n      availableTokensOfColor\n    );\n    remainingRequiredTokens -= naturalTokenCost;\n\n    // e.g. 1 Emeralds - 1 Wild token = 0 Emeralds still required\n    const wildCost = Math.min(remainingRequiredTokens, availableWilds);\n    remainingRequiredTokens -= wildCost;\n\n    // if we aren't able to satisfy the cost, even with wilds,\n    // report the deficit\n    if (remainingRequiredTokens > 0) {\n      cost.tokens[color] = -remainingRequiredTokens;\n    } else {\n      // we're all done with our maths so go ahead and update the return value\n      cost.tokens[color] = (cost.tokens[color] || 0) + naturalTokenCost;\n      cost.tokens[ResourceType.Wild] =\n        (cost.tokens[ResourceType.Wild] || 0) + wildCost;\n\n      // subtract the wilds we had to use from the ones available\n      // so they can't be used again\n      availableWilds -= wildCost;\n    }\n\n    // card costs can only be paid with cards (only report missing cards)\n    const cardDeficit = Math.max(\n      0,\n      requiredCardsOfColor - availableCardsOfColor\n    );\n    cost.cards[color] = (cost.cards[color] || 0) - cardDeficit;\n  }\n\n  return cost;\n};\n\nexport const hasRequiredResources = (\n  required: ResourceTotals,\n  available?: ResourceTotals\n): boolean => {\n  const cost = available ? calculatePayment(required, available) : required;\n  const missingCards = requiresAdditionalResources(cost.cards);\n  const missingResources = requiresAdditionalResources(cost.tokens);\n  return !(missingCards || missingResources);\n};\n\nconst requiresAdditionalResources = (target: ResourceCount | undefined) =>\n  target == null ? false : Object.keys(target).some(key => target[key] < 0);\n\nexport const add = (\n  target: ResourceCount,\n  toMerge: ResourceCount\n): ResourceCount =>\n  Object.keys(toMerge).reduce(\n    (sum, resourceType) => {\n      if (sum[resourceType] != null) {\n        sum[resourceType] = sum[resourceType] + toMerge[resourceType];\n      } else {\n        sum[resourceType] = toMerge[resourceType];\n      }\n\n      return sum;\n    },\n    // clone the input\n    Object.assign({}, target || {}) as ResourceCount\n  );\n\nexport const times = count => <TResult>(\n  f: (i?: number) => TResult\n): TResult[] => {\n  let results: TResult[] = [];\n\n  for (let i = 0; i < count; i++) {\n    results.push(f(i));\n  }\n\n  return results;\n};\n\nexport const randomItem = <T>(items: T[]): T =>\n  items[Math.floor(Math.random() * items.length)];\n\nexport const waitFor = (predicate: () => boolean) =>\n  new Promise((done, reject) => {\n    let count = 0;\n    let timer = setInterval(() => {\n      if (predicate()) {\n        done();\n        clearInterval(timer);\n      } else if (++count >= 10) {\n        reject();\n      }\n    }, 100);\n  });\n\nexport const getCardResourceCount = (cards: DevelopmentCard[]): ResourceCount =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerResourceTotals = ({\n  playedCards,\n  tokens\n}: Player) => ({\n  tokens: tokens,\n  cards: calculateCardResources(playedCards)\n});\n\nexport const calculateCardResources = (cards: DevelopmentCard[]) =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerPrestigePoints = ({\n  patrons,\n  playedCards\n}: Player) =>\n  [...patrons, ...playedCards].reduce(\n    (total, x) => (total += x.prestigePoints),\n    0\n  );\n\nexport const recalculatePlayerTotals = (\n  playerOrState: Player | GameState\n): void => {\n  if (\"id\" in playerOrState) {\n    const player = playerOrState;\n    player.prestigePoints = calculatePlayerPrestigePoints(player);\n  } else {\n    playerOrState.players.forEach(recalculatePlayerTotals);\n  }\n};\n\nexport const findCurrentPlayer = (state: GameState): Player => {\n  const player = findPlayer(state.players, state.currentPlayerId);\n  if (player == null) {\n    throw new Error(\"Couldn't find current player\");\n  }\n  return player;\n};\n\nexport const findPlayer = (\n  players: Player[],\n  playerId: string\n): Player | null =>\n  players == null ? null : players.find(x => x.id === playerId);\n\nexport const clone = <T>(source: T): T => JSON.parse(JSON.stringify(source));\n","import { DevelopmentCard, GameState } from \"../Model\";\nimport { findCurrentPlayer } from \"./utils\";\n\nexport const takeDevelopmentCard = (\n  state: GameState,\n  card: DevelopmentCard\n) => {\n  const player = findCurrentPlayer(state);\n\n  for (let row of state.availableCards) {\n    const matchesCardId = (x: DevelopmentCard) => x && x.id === card.id;\n\n    const topStockCard = row.stock[row.stock.length - 1];\n    const isStockCard = matchesCardId(topStockCard);\n\n    const visibleCardIndex = row.visibleCards.findIndex(matchesCardId);\n    const isVisibleCard = visibleCardIndex > -1;\n\n    if (isStockCard) {\n      row.stock.pop();\n      player.reservedCards.push(card);\n      return;\n    } else if (isVisibleCard) {\n      row.visibleCards[visibleCardIndex] = null;\n      player.reservedCards.push(card);\n      return;\n    }\n  }\n\n  throw new Error(\n    `Couldn't find card ${JSON.stringify(\n      card\n    )} in top card of stock piles or visible cards`\n  );\n};\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerActionCommand,\n  PlayerAction,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectMultipleResources extends PlayerAction {\n  resources: ResourceType[];\n}\n\nexport class CollectMultipleResourcesCommand extends PlayerActionCommand<\n  CollectMultipleResources\n> {\n  execute(state: GameState) {\n    for (let resource of this.action.resources) {\n      state.availableTokens[resource] =\n        (state.availableTokens[resource] || 0) - 1;\n\n      findCurrentPlayer(state).tokens[resource] =\n        (findCurrentPlayer(state).tokens[resource] || 0) + 1;\n    }\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const availableResources = NativeResourceTypes.filter(\n      type => state.availableTokens[type] > 0\n    ).map(x => ResourceType[x] as ResourceType);\n\n    // not enough resources to take three\n    if (availableResources.length < 3) return [];\n\n    // return all combinations of the available resources\n    let actions: [ResourceType, ResourceType, ResourceType][] = [];\n\n    for (let x of availableResources) {\n      for (let y of availableResources.filter(n => n !== x)) {\n        for (let z of availableResources.filter(n => n !== x && n !== y)) {\n          actions.push([x, y, z]);\n        }\n      }\n    }\n\n    return actions.map(resources => ({\n      move: \"collectMultipleResources\",\n      args: [resources]\n    }));\n  };\n}\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectSingleResource extends PlayerAction {\n  resource: ResourceType;\n}\n\nexport class CollectSingleResourceCommand extends PlayerActionCommand<\n  CollectSingleResource\n> {\n  execute(state: GameState) {\n    state.availableTokens[this.action.resource] =\n      (state.availableTokens[this.action.resource] || 0) - 2;\n\n    const player = findCurrentPlayer(state);\n\n    player.tokens[this.action.resource] =\n      (player.tokens[this.action.resource] || 0) + 2;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] =>\n    NativeResourceTypes.filter(type => state.availableTokens[type] >= 2)\n      .map(x => ResourceType[x])\n      .map(resource => ({ move: \"collectSingleResource\", args: [resource] }));\n}\n","import { DevelopmentCard, GameState, ResourceTotals } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport {\n  hasRequiredResources,\n  calculatePayment,\n  deduct,\n  add,\n  calculatePlayerResourceTotals,\n  findCurrentPlayer,\n  takeDevelopmentCard,\n  calculateCardResources\n} from \"../../../util\";\n\nexport interface PurchaseDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class PurchaseDevelopmentCardCommand extends PlayerActionCommand<\n  PurchaseDevelopmentCard\n> {\n  static readonly INSUFFICIENT_FUNDS =\n    \"Player has insufficient funds to purchase this card\";\n\n  static readonly UNAVAILABLE_CARD = \"Card is not available to play\";\n\n  execute(state: GameState) {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't purchase an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    const payment = calculatePayment(\n      card.cost,\n      calculatePlayerResourceTotals(player)\n    );\n\n    if (!hasRequiredResources(payment)) {\n      throw new Error(PurchaseDevelopmentCardCommand.INSUFFICIENT_FUNDS);\n    }\n\n    const isOnTable = state.availableCards.some(row =>\n      row.visibleCards.some(x => x && x.id === card.id)\n    );\n\n    let reservedCard = player.reservedCards.find(x => x.id === card.id);\n\n    if (!reservedCard && !isOnTable) {\n      throw new Error(PurchaseDevelopmentCardCommand.UNAVAILABLE_CARD);\n    }\n\n    // pay for it first - take it from the player...\n    player.tokens = deduct(payment.tokens, player.tokens);\n\n    // ... and add it (back) to the bank\n    state.availableTokens = add(state.availableTokens, payment.tokens);\n\n    // take it from the table\n    if (isOnTable) {\n      takeDevelopmentCard(state, card);\n      reservedCard = card;\n    }\n\n    // take it from the player's hand\n    player.reservedCards.splice(player.reservedCards.indexOf(reservedCard), 1);\n\n    // add the card to the collection of played cards\n    player.playedCards.push(card);\n\n    player.prestigePoints = (player.prestigePoints || 0) + card.prestigePoints;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const visibleCards = state.availableCards.flatMap(x => x.visibleCards);\n    const { reservedCards } = findCurrentPlayer(state);\n    const accessibleCards = [...visibleCards, ...reservedCards].filter(\n      x => x != null\n    );\n\n    const currentPlayer = findCurrentPlayer(state);\n\n    const playerResources: ResourceTotals = {\n      tokens: currentPlayer.tokens,\n      cards: calculateCardResources(currentPlayer.playedCards)\n    };\n\n    const playableCards = accessibleCards.filter(card =>\n      hasRequiredResources(card.cost, playerResources)\n    );\n\n    return playableCards.map(card => ({\n      move: \"purchaseDevelopmentCard\",\n      args: [card]\n    }));\n  };\n}\n","import { DevelopmentCard, GameState } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer, takeDevelopmentCard } from \"../../../util\";\n\nexport interface ReserveDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class ReserveDevelopmentCardCommand extends PlayerActionCommand<\n  ReserveDevelopmentCard\n> {\n  execute(state: GameState): GameState {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't reserve an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    // give the player a wild token\n    if (state.availableTokens.Wild > 0) {\n      player.tokens.Wild = (player.tokens.Wild || 0) + 1;\n      state.availableTokens.Wild = (state.availableTokens.Wild || 0) - 1;\n    }\n\n    // take the card off the table and add a new one in its place\n    takeDevelopmentCard(state, card);\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const player = findCurrentPlayer(state);\n\n    if (player.reservedCards.length >= 4) {\n      return [];\n    }\n\n    return state.availableCards\n      .flatMap(x => x.visibleCards)\n      .filter(x => x != null)\n      .map(card => ({ move: \"reserveDevelopmentCard\", args: [card] }));\n  };\n}\n","import { CollectMultipleResourcesCommand } from \"./collectMultipleResources\";\nimport { CollectSingleResourceCommand } from \"./collectSingleResource\";\nimport { PurchaseDevelopmentCardCommand } from \"./purchaseDevelopmentCard\";\nimport { ReserveDevelopmentCardCommand } from \"./reserveDevelopmentCard\";\nimport { PlayerActionCommand } from \"./PlayerAction\";\nimport { GameContext, GameState } from \"../../../Model\";\n\ninterface GameActionHandler {\n  (G: GameState, ctx: GameContext, ...args): GameState;\n}\n\nexport const getAvailableMoves = (state: GameState) =>\n  [\n    CollectMultipleResourcesCommand,\n    CollectSingleResourceCommand,\n    PurchaseDevelopmentCardCommand,\n    ReserveDevelopmentCardCommand\n  ].flatMap(cmd => cmd.getAvailableMoves(state));\n\nconst executeCommand = (\n  state: GameState,\n  ctx: GameContext,\n  CommandType: { new (...args): PlayerActionCommand },\n  args?\n): GameState => {\n  const cmd = new CommandType(args);\n  return cmd.execute(state);\n};\n\nexport const moves: { [key: string]: GameActionHandler } = {\n  collectMultipleResources: (G, ctx, resources) =>\n    executeCommand(G, ctx, CollectMultipleResourcesCommand, {\n      resources\n    }),\n\n  collectSingleResource: (G, ctx, resource) =>\n    executeCommand(G, ctx, CollectSingleResourceCommand, { resource }),\n\n  purchaseDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, PurchaseDevelopmentCardCommand, { card }),\n\n  reserveDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, ReserveDevelopmentCardCommand, { card })\n};\n\nexport default moves;\n","import { Game } from \"boardgame.io/core\";\nimport { GameState, GameResults } from \"../../Model\";\nimport moves from \"./moves\";\nimport { initializeGame as setup } from \"./initializeGame\";\nimport { populateVisibleCards } from \"../../util\";\n\nexport type Moves = { [key in keyof typeof moves]: (...args) => void };\n\nexport const SplendidGame = Game<GameState, Moves>({\n  setup,\n\n  moves,\n\n  flow: {\n    movesPerTurn: 1,\n    onTurnBegin: (G, ctx) => {\n      G.currentPlayerId = ctx.currentPlayer;\n    },\n    onTurnEnd: (G, ctx) => {\n      // TODO: evaluate patrons\n      populateVisibleCards(G.availableCards);\n    },\n    endGameIf: (G): GameResults | void => {\n      const winners = G.players.filter(x => x.prestigePoints >= 15);\n\n      if (winners.length) {\n        const rankings = [...G.players].sort(\n          (a, b) => b.prestigePoints - a.prestigePoints\n        );\n        return { winner: winners[0], rankings };\n      }\n    }\n  }\n});\n\nconsole.log(`Moves: ${SplendidGame.moveNames}`);\n","import { importDeck, shuffle, populateVisibleCards } from \"../../util\";\n\nexport const initializeGame = initial => {\n  const deck = importDeck();\n\n  shuffle(deck);\n\n  const availableCards = [\n    {\n      level: 3,\n      stock: deck.filter(x => x.level === 3),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 2,\n      stock: deck.filter(x => x.level === 2),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 1,\n      stock: deck.filter(x => x.level === 1),\n      visibleCards: Array(4).fill(null)\n    }\n  ];\n\n  populateVisibleCards(availableCards);\n\n  const players = Array(initial.numPlayers)\n    .fill(0)\n    .map((_, id) => ({\n      id: String(id),\n      name: `Player ${id + 1}`,\n      isHuman: false,\n      patrons: [],\n      playedCards: [],\n      tokens: {},\n      prestigePoints: 0,\n      reservedCards: [],\n      totalResources: {}\n    }));\n\n  const availableTokens = {\n    Wild: 7,\n    Emerald: 5,\n    Onyx: 5,\n    Ruby: 5,\n    Sapphire: 5,\n    Diamond: 5\n  };\n\n  return {\n    availableCards,\n    availableTokens,\n    players\n  };\n};\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport { Moves } from \"../game\";\nimport {\n  DevelopmentCard as DevelopmentCardModel,\n  GameState,\n  ResourceType,\n  Player,\n  GameResults\n} from \"../../Model\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { IBoardProps } from \"boardgame.io/react\";\n\nimport \"./board.css\";\nimport {\n  Box,\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  Typography,\n  DialogActions,\n  Button\n} from \"@material-ui/core\";\nimport {\n  findCurrentPlayer,\n  findPlayer,\n  hasRequiredResources,\n  calculatePlayerResourceTotals\n} from \"../../util\";\nimport { styled } from \"@material-ui/styles\";\n\nconst Column = styled(Box)({ display: \"flex\", flexDirection: \"column\" });\nconst Row = styled(Box)({ display: \"flex\", flexDirection: \"row\" });\nconst Overlay = styled(\"div\")({\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  width: \"100vw\",\n  height: ({ isActive }: { isActive: boolean }) => `${isActive ? 100 : 0}vh`,\n  zIndex: 1000\n});\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      color: \"#000\",\n      backgroundColor: \"#fff\",\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n      width: \"calc(100% - 310px)\",\n      height: \"100vh\",\n      display: \"grid\",\n      gridColumnGap: 5,\n      gridRowGap: 5,\n      gridTemplateColumns: \"auto 25%\",\n      gridTemplateRows: \"6em auto 13em\",\n      gridTemplateAreas: `\n        \"tokens    player-list\"\n        \"board     player-list\"\n        \"inventory player-list\"`\n    },\n\n    tokens: {\n      gridArea: \"tokens\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n\n      \"& [itemProp='token']\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        fontSize: \"350%\"\n      },\n\n      \"& [itemProp='token'] [itemProp='resource']\": {},\n\n      \"& [itemProp='token'] [itemProp='count']\": {\n        position: \"absolute\",\n        padding: \".4em\",\n        fontSize: \"60%\",\n        fontWeight: 900\n      },\n\n      \"& [itemprop='resource'][data-value='Onyx'] + [itemProp='count']\": {\n        color: \"#fff\"\n      }\n    },\n\n    board: {\n      gridArea: \"board\",\n      padding: \"0 1rem 0.5rem\"\n    },\n\n    playerList: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      gridArea: \"player-list\",\n      backgroundColor: \"#fff\",\n      padding: \"0.4em\"\n    },\n\n    inventory: {\n      gridArea: \"inventory\",\n      display: \"flex\"\n    }\n  })\n);\n\nexport const MainBoard: React.FC<\n  Partial<IBoardProps<GameState, Moves>>\n> = props => {\n  const {\n    G: state,\n    G: { availableCards, availableTokens, currentPlayerId, players },\n    ctx: { gameover },\n    playerID,\n    moves,\n    step\n  } = props;\n\n  const classes = useStyles({});\n\n  const userPlayerId = playerID || players[0].id;\n\n  const [selectedTokens, setSelectedTokens] = useState([]);\n  const currentPlayer = findCurrentPlayer(state);\n  const userPlayer: Player = findPlayer(players, userPlayerId);\n  const otherPlayers = players.filter(x => x.id !== userPlayerId);\n  const isUserPlayersTurn = userPlayerId === currentPlayerId;\n\n  useEffect(() => {\n    if (currentPlayerId !== userPlayerId) {\n      step();\n    }\n  }, [step, currentPlayerId, userPlayerId]);\n\n  const selectToken = useCallback(\n    token => {\n      if (token === ResourceType.Wild) {\n        console.debug(`Ignoring invalid selection of a wild token`);\n        return;\n      }\n\n      let newSelectedTokens = selectedTokens;\n\n      if (selectedTokens.indexOf(token) > -1) {\n        if (selectedTokens.length === 1) {\n          moves.collectSingleResource(token);\n          newSelectedTokens = [];\n        } else {\n          console.debug(`Ignoring invalid duplicate selection of ${token}`);\n        }\n      } else {\n        newSelectedTokens = [...selectedTokens, token];\n      }\n\n      if (newSelectedTokens.length === 3) {\n        moves.collectMultipleResources(newSelectedTokens);\n        newSelectedTokens = [];\n      }\n\n      setSelectedTokens(newSelectedTokens);\n    },\n    [moves, selectedTokens]\n  );\n\n  const selectDevelopmentCard = (card: DevelopmentCardModel): void => {\n    const playerResources = calculatePlayerResourceTotals(currentPlayer);\n\n    if (hasRequiredResources(card.cost, playerResources)) {\n      moves.purchaseDevelopmentCard(card);\n    } else {\n      moves.reserveDevelopmentCard(card);\n    }\n  };\n\n  return (\n    <>\n      {gameover && (\n        <GameOver\n          onClose={() => console.log(\"GameOver closed\")}\n          results={gameover}\n          userPlayer={userPlayer}\n        />\n      )}\n      <Overlay isActive={!isUserPlayersTurn} />\n      <div id=\"container\" className={classes.container}>\n        <div id=\"tokens\" className={classes.tokens}>\n          {Object.keys(availableTokens).map(token => (\n            <div\n              key={token}\n              itemProp=\"token\"\n              onClick={() => selectToken(token)}\n            >\n              <div itemProp=\"resource\" data-value={token} />\n              <div itemProp=\"count\" data-value={availableTokens[token]} />\n            </div>\n          ))}\n        </div>\n        <div id=\"board\" className={classes.board}>\n          {availableCards.map((row, rowIndex) => (\n            <div key={String(rowIndex)} className=\"cardRow\">\n              <div\n                className=\"stock card valid-action\"\n                onClick={() =>\n                  row.stock.length\n                    ? selectDevelopmentCard(row.stock[row.stock.length - 1])\n                    : false\n                }\n              >\n                <span>{row.stock.length}</span>\n              </div>\n              {Array(4)\n                .fill(0)\n                .map(\n                  (_, i) =>\n                    row.visibleCards[i] ||\n                    ({ id: null } as DevelopmentCardModel)\n                )\n                .map((card, idx) => (\n                  <DevelopmentCard\n                    key={card.id || `${row.level}${idx}`}\n                    card={card}\n                    onSelected={selectDevelopmentCard}\n                  />\n                ))}\n            </div>\n          ))}\n        </div>\n        <div id=\"player-list\" className={classes.playerList}>\n          {otherPlayers.map((player: Player) => (\n            <PlayerOverview\n              key={player.id}\n              isCurrentPlayer={player === currentPlayer}\n              player={player}\n            />\n          ))}\n          <div className={`patronRow`}>\n            <div className=\"patron card\">\n              <span>Patron</span>\n            </div>\n            <div className=\"patron card\">\n              <span>Patron</span>\n            </div>\n            <div className=\"patron card\">\n              <span>Patron</span>\n            </div>\n            <div className=\"patron card\">\n              <span>Patron</span>\n            </div>\n            <div className=\"patron card\">\n              <span>Patron</span>\n            </div>\n          </div>\n        </div>\n        <div id=\"inventory\" className={classes.inventory}>\n          {userPlayer && (\n            <UserPlayerInventory\n              isCurrentPlayer={userPlayer.id === currentPlayerId}\n              player={userPlayer}\n              onPlayReservedCard={card => moves.purchaseDevelopmentCard(card)}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface GameOverProps {\n  userPlayer: Player;\n  results: GameResults;\n  onClose(): any;\n}\n\nconst GameOver = ({ results, onClose, userPlayer }: GameOverProps) => (\n  <Dialog open onClose={onClose} aria-labelledby=\"customized-dialog-title\">\n    <DialogTitle>GAME OVER</DialogTitle>\n    <DialogContent dividers>\n      <Typography gutterBottom>\n        {results.winner === userPlayer ? (\n          <Typography>YOU WIN!</Typography>\n        ) : (\n          <Typography>You lose - get off my property</Typography>\n        )}\n      </Typography>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} color=\"primary\">\n        New Game\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nconst DevelopmentCard = ({\n  card,\n  onSelected,\n  canSelect\n}: {\n  card: DevelopmentCardModel;\n  canSelect?: boolean;\n  onSelected(card: DevelopmentCardModel): void;\n}) => (\n  <div\n    className={`card ${card.id || canSelect ? \"valid-action\" : \"\"}`}\n    itemProp=\"card\"\n    onClick={() => (card.id || canSelect ? onSelected(card) : false)}\n  >\n    <div itemProp=\"resource\" data-value={card.resourceType} />\n    {card && card.prestigePoints > 0 && (\n      <div itemProp=\"prestigePoints\" data-value={card.prestigePoints} />\n    )}\n    <div itemProp=\"cost\">\n      {card &&\n        card.cost &&\n        Object.keys(card.cost.tokens).map(resource => (\n          <div key={resource} itemProp=\"token\">\n            <div itemProp=\"resource\" data-value={resource} />\n            <div itemProp=\"count\" data-value={card.cost.tokens[resource]} />\n          </div>\n        ))}\n    </div>\n  </div>\n);\n\nconst PlayerOverview = ({\n  isCurrentPlayer,\n  player\n}: {\n  isCurrentPlayer: boolean;\n  player: Player;\n}) => (\n  <div\n    className={`player ${isCurrentPlayer && \"active\"}`}\n    itemScope\n    itemType=\"urn:x:player\"\n    itemID={String(player.id)}\n  >\n    <div itemProp=\"name\">\n      {player.name}{\" \"}\n      {isCurrentPlayer && (\n        <span dangerouslySetInnerHTML={{ __html: \"&Star;\" }} />\n      )}\n    </div>\n    <div itemProp=\"prestigePoints\">{player.prestigePoints}</div>\n    <div className=\"inventory\">\n      <PlayerInventory player={player} />\n    </div>\n  </div>\n);\n\ninterface PlayerInventoryProps {\n  player: Player;\n}\n\ninterface PlayedCardProps {\n  card: DevelopmentCardModel;\n}\n\nconst PlayedCard = ({ card }: PlayedCardProps) => (\n  <Box width=\"2em\" height=\"3em\">\n    <div itemProp=\"resource\" data-value={card.resourceType} />\n    <div itemProp=\"prestigePoints\" data-value={card.prestigePoints} />\n  </Box>\n);\n\nconst PlayerInventory = ({\n  player: { playedCards, reservedCards, tokens }\n}: PlayerInventoryProps) => (\n  <div itemProp=\"inventory\">\n    <Row justifyContent=\"space-between\" flexWrap=\"wrap\">\n      <Column display=\"flex\" alignContent=\"center\" justifyContent=\"center\">\n        {reservedCards.length}\n      </Column>\n      {playedCards.map(card => (\n        <PlayedCard card={card} />\n      ))}\n    </Row>\n    <div className=\"tokens\">\n      <div className=\"subtitle\">Tokens</div>\n\n      {Object.keys(tokens).map(\n        resource =>\n          tokens[resource] > 0 && (\n            <div key={resource} itemProp=\"token\">\n              <div itemProp=\"resource\" data-value={resource} />\n              <div itemProp=\"count\" data-value={tokens[resource]} />\n            </div>\n          )\n      )}\n    </div>\n  </div>\n);\n\nconst CurrentPlayerName = styled(\"h3\")({\n  writingMode: \"vertical-lr\",\n  textOrientation: \"upright\"\n});\n\nconst UserPlayerInventory = ({\n  isCurrentPlayer,\n  player,\n  onPlayReservedCard\n}: {\n  isCurrentPlayer: boolean;\n  player: Player;\n  onPlayReservedCard(card: DevelopmentCardModel): void;\n}) => (\n  <Row position=\"relative\" flexGrow={1} className={isCurrentPlayer && \"active\"}>\n    <Box className=\"prestigePoints\" position=\"absolute\" top=\"1rem\" right=\"1rem\">\n      {player.prestigePoints}\n    </Box>\n    <CurrentPlayerName>{player.name}</CurrentPlayerName>\n    <Row>\n      <Row border=\"1px solid #333\">\n        <Row id=\"playerTokens\" fontSize=\"160%\" flexWrap=\"wrap\" width=\"5rem\">\n          {Object.keys(player.tokens).map(\n            resource =>\n              player.tokens[resource] > 0 && (\n                <div key={resource} itemProp=\"token\">\n                  <div itemProp=\"resource\" data-value={resource} />\n                  <div itemProp=\"count\" data-value={player.tokens[resource]} />\n                </div>\n              )\n          )}\n        </Row>\n        <Row id=\"reservedCards\">\n          {player.reservedCards.map(card => (\n            <DevelopmentCard\n              key={card.id}\n              card={card}\n              onSelected={onPlayReservedCard}\n            />\n          ))}\n        </Row>\n      </Row>\n      <Row>\n        <Row id=\"playedCards\">\n          {groupCards(player.playedCards).map(({ resourceType, cards }) => (\n            <Box\n              className={`cardStack ${resourceType}`}\n              position=\"relative\"\n              width=\"9em\"\n            >\n              {cards.map((card, idx) => (\n                <Box\n                  position=\"absolute\"\n                  top={`${idx * 3}em`}\n                  width=\"7em\"\n                  paddingRight=\"1em\"\n                >\n                  <DevelopmentCard\n                    key={card.id}\n                    card={card}\n                    onSelected={() => null}\n                  />\n                </Box>\n              ))}\n            </Box>\n          ))}\n        </Row>\n      </Row>\n    </Row>\n  </Row>\n);\n\ntype DevelopmentCardGroup = {\n  resourceType: ResourceType;\n  cards: DevelopmentCardModel[];\n};\n\nconst groupCards = (cards: DevelopmentCardModel[]): DevelopmentCardGroup[] =>\n  cards.reduce((grouped: DevelopmentCardGroup[], card) => {\n    const { resourceType } = card;\n    let group = grouped.find(x => x.resourceType === resourceType);\n\n    if (group == null) {\n      grouped.push({ resourceType, cards: [card] });\n    } else {\n      group.cards.push(card);\n    }\n\n    return grouped;\n  }, []);\n","import { AI, MCTSBot } from \"boardgame.io/ai\";\nimport { MCTSVisualizer } from \"boardgame.io/ai-visualize\";\nimport { getAvailableMoves } from \"./game/moves\";\nimport { GameState } from \"Model\";\nimport { IGameCtx } from \"boardgame.io/core\";\nimport { findPlayer } from \"../util\";\nimport { AIVisualizer } from \"./AIVisualizer\";\n\nconst objective = (\n  multiplier: number,\n  calculateScore: (targetState: GameState) => number\n) => ({\n  weight: 0,\n  checker: function(state: GameState) {\n    const score = calculateScore(state);\n    this.weight = score * multiplier;\n    return this.weight > 0;\n  }\n});\n\nclass Bot extends MCTSBot {\n  constructor(args) {\n    super({\n      ...args,\n      iterations: 100, // default: 1000\n      playoutDepth: 100, // default: 50\n      objectives: function(\n        initialState: GameState,\n        _: IGameCtx,\n        playerId: string\n      ) {\n        if (!playerId) return {};\n\n        const player = findPlayer(initialState.players, playerId);\n\n        return {\n          winGame: objective(\n            Number.POSITIVE_INFINITY,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints >= 15\n                ? 1\n                : 0\n          ),\n          increasePrestigePoints: objective(\n            50,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints -\n              player.prestigePoints\n          )\n        };\n      }\n    });\n  }\n}\n\nexport default AI({\n  bot: Bot,\n  enumerate: getAvailableMoves,\n  visualize: MCTSVisualizer(AIVisualizer)\n});\n","import React from \"react\";\nimport { GameState } from \"Model\";\nimport { findCurrentPlayer } from \"../util\";\n\nexport const AIVisualizer = ({ G }: { G: GameState }) => {\n  const player = findCurrentPlayer(G);\n\n  return player == null ? null : (\n    <div style={{ transform: \"scale(0.4)\" }}>\n      <table>\n        <tr>\n          <th>Prestige</th>\n          <td>{player.prestigePoints}</td>\n        </tr>\n        <tr>\n          <th>Cards</th>\n          <td>\n            P: {player.playedCards} | R: {player.reservedCards}\n          </td>\n        </tr>\n        <tr>\n          <th>Tokens</th>\n          <td>\n            {Object.keys(player.tokens).reduce(\n              (total, tok) => (total += player.tokens[tok]),\n              0\n            )}\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Client } from \"boardgame.io/react\";\nimport game from \"./game\";\nimport board from \"./board\";\nimport ai from \"./ai\";\nimport { observer } from \"mobx-react-lite\";\nimport { GameSettings } from \"./setup/GameSettingsStore\";\n\nconst GameClient = observer<{ settings: GameSettings }>(({ settings }) => {\n  const View = Client({\n    game,\n    board,\n    ai,\n    numPlayers: settings.numberOfPlayers,\n    multiplayer: settings.multiplayer,\n    debug: settings.debug\n  } as any);\n\n  return <View />;\n});\n\nexport default GameClient;\n","import React from \"react\";\nimport GameClient from \"./GameClient\";\nimport { observer } from \"mobx-react-lite\";\n\nconst SplendidGame = observer(() => {\n  return (\n    <GameClient\n      settings={{\n        numberOfPlayers: 2,\n        musicVolume: 0,\n        sfxVolume: 0,\n        players: []\n      }}\n    />\n  );\n});\nSplendidGame.displayName = \"SplendidGame\";\n\nexport default SplendidGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Splendid from \"./Splendid\";\n\nexport default () => <Splendid />;\n"],"sourceRoot":""}