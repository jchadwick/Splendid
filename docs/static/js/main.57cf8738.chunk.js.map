{"version":3,"sources":["Model.ts","Splendid/game/moves/PlayerAction.ts","util/deckGenerator.ts","util/populateVisibleCards.ts","util/shuffle.ts","util/utils.ts","util/takeDevelopmentCard.ts","Splendid/game/moves/collectMultipleResources.ts","Splendid/game/moves/collectSingleResource.ts","Splendid/game/moves/purchaseDevelopmentCard.ts","Splendid/game/moves/reserveDevelopmentCard.ts","Splendid/game/moves/index.ts","Splendid/game/SplendidGame.ts","Splendid/game/initializeGame.ts","Splendid/board/MainBoard.tsx","Splendid/ai.ts","Splendid/AIVisualizer.tsx","Splendid/GameClient.tsx","Splendid/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["ResourceType","Object","freeze","keys","filter","x","map","NativeResourceTypes","Wild","PlayerActionCommand","action","JSON","stringify","name","this","__proto__","constructor","blueprints","split","line","length","level","resourceType","cost","prestigePoints","convertBlueprintsToDefinitions","blueprint","placeholders","resourceMap","reduce","idx","replacePlaceholders","source","replacements","replaced","placeholder","replace","RegExp","generateDeck","definitions","isValidDefinition","toDevelopmentCard","definition","isANumber","isResourceType","value","indexOf","input","min","max","parsed","Number","isNaN","id","parseCost","trim","totals","resource","isCard","endsWith","substr","costGroup","cards","tokens","populateVisibleCards","cardRows","forEach","row","visibleCards","stock","pop","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","createResourceCollection","bag","color","calculatePayment","required","available","availableCards","availableTokens","requiredCards","requiredTokens","availableWilds","availableCardsOfColor","availableTokensOfColor","requiredCardsOfColor","requiredTokensOfColor","remainingRequiredTokens","naturalTokenCost","wildCost","cardDeficit","hasRequiredResources","missingCards","requiresAdditionalResources","missingResources","target","some","key","add","toMerge","sum","assign","calculateCardResources","cardResources","card","findCurrentPlayer","state","player","findPlayer","players","currentPlayerId","Error","playerId","find","takeDevelopmentCard","matchesCardId","isStockCard","visibleCardIndex","findIndex","isVisibleCard","reservedCards","push","CollectMultipleResourcesCommand","resources","getAvailableMoves","availableResources","type","actions","y","n","z","move","args","CollectSingleResourceCommand","PurchaseDevelopmentCardCommand","payment","playedCards","calculatePlayerResourceTotals","INSUFFICIENT_FUNDS","from","isOnTable","reservedCard","UNAVAILABLE_CARD","deducted","splice","flatMap","accessibleCards","currentPlayer","playerResources","ReserveDevelopmentCardCommand","executeCommand","ctx","CommandType","execute","moves","collectMultipleResources","G","collectSingleResource","purchaseDevelopmentCard","reserveDevelopmentCard","SplendidGame","Game","setup","initial","deck","importDeck","Array","fill","Emerald","Onyx","Ruby","Sapphire","Diamond","numPlayers","_","String","isHuman","patrons","totalResources","flow","movesPerTurn","onTurnBegin","onTurnEnd","endGameIf","winners","winner","console","log","moveNames","useStyles","makeStyles","createStyles","container","backgroundColor","fontFamily","width","height","display","gridColumnGap","gridRowGap","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","alignItems","justifyContent","flexDirection","fontSize","position","padding","fontWeight","board","playerList","alignContent","inventory","MainBoard","props","classes","useState","selectedTokens","setSelectedTokens","userPlayer","selectToken","useCallback","token","newSelectedTokens","debug","className","itemProp","onClick","data-value","rowIndex","i","onSelected","isCurrentPlayer","onPlayReservedCard","DevelopmentCard","PlayerOverview","itemScope","itemType","itemID","dangerouslySetInnerHTML","__html","PlayerInventory","UserPlayerInventory","Box","objective","multiplier","calculateScore","weight","checker","score","Bot","iterations","playoutDepth","objectives","initialState","winGame","POSITIVE_INFINITY","targetState","increasePrestigePoints","MCTSBot","AI","bot","enumerate","cmd","visualize","MCTSVisualizer","style","transform","total","tok","GameClient","observer","settings","View","Client","game","ai","numberOfPlayers","multiplayer","musicVolume","sfxVolume","displayName","Boolean","window","location","hostname","match","ReactDOM","render","Splendid","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.57cf8738.chunk.js","sourcesContent":["export interface GameContext {\n  allowedMoves: [];\n  currentPlayer: string;\n  turn: number;\n}\n\nexport enum ResourceType {\n  Wild = \"Wild\",\n  Emerald = \"Emerald\",\n  Sapphire = \"Sapphire\",\n  Ruby = \"Ruby\",\n  Diamond = \"Diamond\",\n  Onyx = \"Onyx\"\n}\n\nexport type ResourceTypes = keyof typeof ResourceType;\n\nexport const AllResourceTypes: ResourceType[] = Object.freeze(\n  Object.keys(ResourceType)\n    .filter(x => typeof x === \"string\")\n    .map(x => ResourceType[x] as ResourceType)\n) as ResourceType[];\n\nexport const NativeResourceTypes = Object.freeze(\n  Object.keys(ResourceType).filter(x => x !== ResourceType.Wild)\n);\n\nexport type ResourceCount = { [key in ResourceTypes]?: number | undefined };\n\nexport interface Resource {\n  readonly kind: ResourceType;\n}\n\nexport interface ResourceTotals {\n  tokens?: ResourceCount;\n  cards?: ResourceCount;\n}\n\nexport interface DevelopmentCard {\n  readonly id: string;\n  readonly level: number;\n  readonly cost: ResourceTotals;\n  readonly resourceType: ResourceType;\n  readonly prestigePoints: number;\n}\n\nexport interface Patron {\n  readonly name: string;\n  readonly cost: ResourceTotals;\n  readonly prestigePoints: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  isHuman: boolean;\n  patrons: Patron[];\n  playedCards: DevelopmentCard[];\n  reservedCards: DevelopmentCard[];\n  tokens: ResourceCount;\n  prestigePoints: number;\n}\n\nexport interface DevelopmentCardRow {\n  level: number;\n  stock: DevelopmentCard[];\n  visibleCards: DevelopmentCard[];\n}\n\nexport interface GameState {\n  availableCards: DevelopmentCardRow[];\n  availableTokens: ResourceCount;\n  players: Player[];\n  currentPlayerId: string;\n}\n","import { GameState } from \"../../../Model\";\nimport { moves } from \"./index\";\n\nexport interface PlayerAction {}\n\ntype PlayerActionCommandType = typeof PlayerActionCommand;\n\nexport type AvailableMove = { move: keyof typeof moves; args: any[] };\n\nexport interface PlayerActionCommandStatic extends PlayerActionCommandType {\n  getAvailableMoves(gameState: GameState): AvailableMove[];\n}\n\nexport abstract class PlayerActionCommand<T = any> {\n  hash(): string {\n    return JSON.stringify({\n      name: (this as any).__proto__.constructor.name,\n      action: this.action\n    });\n  }\n\n  constructor(public readonly action: T) {}\n  abstract execute(gameState: GameState): GameState;\n}\n","import {\n  DevelopmentCard,\n  ResourceType,\n  ResourceTotals,\n  NativeResourceTypes\n} from \"../Model\";\n\n/*\n    CSV file contains the definitions for ONE color,\n    so use this as a blueprint to loop through all the colors\n  */\nconst blueprints = `\n1,E,{A} & {B} & {B},0\n1,E,{A} & {A} & {C} & {C},0\n1,E,{C} & {C} & {C},0\n1,E,{A} & {B} & {C} & {D},0\n1,E,{A} & {C} & {C} & {D} & {D},0\n1,E,{A} & {B} & {C} & {D} & {D},0\n1,E,{D} & {D} & {D} & {D},1\n\n2,E,{D} & {D} & {D} & {A} & {A} & {B} & {B}, 1\n2,E,{E} & {E} & {C} & {C} & {C} & {B} & {B} & {B}, 1\n2,E,{B} & {B} & {B} & {B} & {D} & {A} & {A}, 2\n2,E,{B} & {B} & {B} & {B} & {B}, 2\n2,E,{B} & {B} & {B} & {B} & {B} & {A} & {A} & {A}, 2\n2,E,{E} & {E} & {E} & {E} & {E} & {E}, 3\n\n3,E,{C} & {C} & {C} & {D} & {D} & {D} & {A} & {A} & {A} & {B} & {B} & {B} & {B} & {B},3\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E} & {B} & {B} & {B},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E},5`\n  .split(/\\n/)\n  .filter(line => line && line.length)\n  .map(line => line.split(\",\"))\n  .map(\n    ([level, resourceType, cost, prestigePoints]) =>\n      ({\n        level,\n        resourceType,\n        cost,\n        prestigePoints\n      } as DevelopmentCardDefinition)\n  );\n\ntype DevelopmentCardDefinition = {\n  [key in keyof Omit<DevelopmentCard, \"id\">]: string;\n};\n\nexport const importDeck = () => {\n  const definitions = [\n    // matrix containing all variations of the placeholders coming first\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\", \"E\", \"A\"],\n    [\"C\", \"D\", \"E\", \"A\", \"B\"],\n    [\"D\", \"E\", \"A\", \"B\", \"C\"],\n    [\"E\", \"A\", \"B\", \"C\", \"D\"]\n  ].flatMap(placeholders =>\n    convertBlueprintsToDefinitions(blueprints, placeholders)\n  );\n\n  return generateDeck(definitions);\n};\n\n/** Generates the set of cards from the blueprint for a single resource */\nconst convertBlueprintsToDefinitions = (\n  blueprint,\n  placeholders\n): DevelopmentCardDefinition[] => {\n  // create the mapping from placeholders to their actual values,\n  // e.g. \"A\" -> \"Gold\", \"B\" -> \"Silver\", etc.\n  const resourceMap = placeholders.reduce((map, x, idx) => {\n    map[x] = NativeResourceTypes[idx];\n    return map;\n  }, {});\n\n  return blueprint.map(\n    ({ cost, level, prestigePoints, resourceType }) =>\n      ({\n        cost: replacePlaceholders(cost, placeholders, resourceMap),\n        level: level,\n        prestigePoints: prestigePoints,\n        resourceType: resourceMap[resourceType]\n      } as DevelopmentCardDefinition)\n  );\n};\n\nconst replacePlaceholders = (source, placeholders, replacements) =>\n  placeholders.reduce(\n    (replaced, placeholder) =>\n      replaced.replace(\n        new RegExp(`{${placeholder}}`, \"g\"),\n        replacements[placeholder]\n      ),\n    source\n  );\n\nexport const generateDeck = (definitions: DevelopmentCardDefinition[]) =>\n  definitions.filter(isValidDefinition).map(toDevelopmentCard);\n\nconst isValidDefinition = (definition: DevelopmentCardDefinition) =>\n  definition &&\n  !!definition.cost &&\n  isANumber(definition.level, 1, 3) &&\n  isResourceType(definition.resourceType) &&\n  isANumber(definition.prestigePoints, 0, 10);\n\nconst isResourceType = value => Object.keys(ResourceType).indexOf(value) > -1;\n\nconst isANumber = (input: string, min: number, max: number) =>\n  ((parsed: number) => !Number.isNaN(parsed) && parsed >= min && parsed <= max)(\n    Number(input)\n  );\n\nconst toDevelopmentCard = (\n  { cost, level, prestigePoints, resourceType }: DevelopmentCardDefinition,\n  id: number\n): DevelopmentCard => ({\n  id: `${id}_L${level}_${resourceType}`,\n  level: Number(level),\n  resourceType: ResourceType[resourceType],\n  cost: parseCost(cost),\n  prestigePoints: Number(prestigePoints)\n});\n\nconst parseCost = (cost: string): ResourceTotals =>\n  (cost || \"\")\n    .split(\"&\")\n    .map(x => x.trim())\n    .reduce(\n      (totals, resource) => {\n        const isCard = resource.endsWith(\"Card\");\n\n        const resourceType = isCard\n          ? resource.substr(0, resource.length - \"Card\".length)\n          : resource;\n\n        const costGroup = totals[isCard ? \"cards\" : \"tokens\"];\n        costGroup[resourceType] = (costGroup[resourceType] || 0) + 1;\n\n        return totals;\n      },\n      { cards: {}, tokens: {} } as ResourceTotals\n    );\n","import { DevelopmentCardRow } from \"../Model\";\n\nexport const populateVisibleCards = (cardRows: DevelopmentCardRow[]) => {\n  cardRows.forEach(row => {\n    for (let x = 0; x < row.visibleCards.length; x++) {\n      if (row.visibleCards[x] == null && row.stock.length !== 0) {\n        row.visibleCards[x] = row.stock.pop();\n      }\n    }\n  });\n};\n","/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nexport const shuffle = function(array) {\n  var currentIndex = array.length;\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import {\n  ResourceTotals,\n  Resource,\n  ResourceType,\n  ResourceCount,\n  ResourceTypes,\n  NativeResourceTypes,\n  DevelopmentCard,\n  Player,\n  GameState\n} from \"../Model\";\n\nexport const deduct = (\n  cost: ResourceCount,\n  from: ResourceCount\n): ResourceCount =>\n  Object.keys(cost).reduce(\n    (deducted, resourceType) => {\n      if (deducted[resourceType] != null) {\n        deducted[resourceType] = deducted[resourceType] - cost[resourceType];\n      } else {\n        deducted[resourceType] = -cost[resourceType];\n      }\n\n      return deducted;\n    },\n    // clone the input\n    Object.assign({}, from || {}) as ResourceCount\n  );\n\nexport const getGemCount = (\n  tokens: (Resource | ResourceType | ResourceTypes)[]\n): ResourceCount =>\n  Object.keys(ResourceType).reduce((counts, color) => {\n    const total = tokens\n      .map(x => (typeof x === \"string\" ? color : x.kind))\n      .filter(x => x === color).length;\n\n    counts[color] = (counts[color] == null ? 0 : counts[color]) + total;\n\n    return counts;\n  }, {}) as ResourceCount;\n\nexport const createResourceCollection = (): ResourceCount =>\n  Object.keys(ResourceType).reduce(\n    // eslint-disable-next-line\n    (bag, color) => ((bag[color] = 0), bag),\n    {} as ResourceCount\n  );\n\n/**\n * Determines what a player will have to pay in order to purchase an item\n *\n * @param required the item's cost\n * @param available the resources currently available\n *\n * @returns the set of resources that will satisfy the required cost\n * Any resource requirements that can't be met will be identified with a negative cost\n */\nexport const calculatePayment = (\n  required: ResourceTotals,\n  available: ResourceTotals\n): ResourceTotals => {\n  const availableCards = (available && available.cards) || {};\n  const availableTokens = (available && available.tokens) || {};\n  const requiredCards = (required && required.cards) || {};\n  const requiredTokens = (required && required.tokens) || {};\n\n  // store this outside so we can keep track as we use them\n  let availableWilds = availableTokens[ResourceType.Wild] || 0;\n\n  let cost = {\n    cards: createResourceCollection(),\n    tokens: createResourceCollection()\n  };\n\n  for (let color of NativeResourceTypes) {\n    const availableCardsOfColor = availableCards[color] || 0;\n    const availableTokensOfColor = availableTokens[color] || 0;\n    const requiredCardsOfColor = requiredCards[color] || 0;\n    const requiredTokensOfColor = requiredTokens[color] || 0;\n\n    // Don't waste time figuring out how to pay for things that aren't required\n    if (requiredCardsOfColor + requiredTokensOfColor === 0) {\n      continue;\n    }\n\n    /* Example:\n        Required: 3 Emeralds\n        Available Cards: 1 Emerald\n        Available Tokens: 1 Emerald, 1 Wild\n        == Cost:  1 Emerald, 1 Wild\n      */\n\n    // e.g. 3 Emeralds\n    let remainingRequiredTokens = requiredTokensOfColor;\n\n    // factor in the cards we have (i.e. tokens we get for \"free\");\n    // e.g. 3 Emeralds - 1 Emerald card = 2 Emeralds still required\n    const cardDiscount = Math.min(\n      remainingRequiredTokens,\n      availableCardsOfColor\n    );\n    remainingRequiredTokens -= cardDiscount;\n\n    // how many natural tokens do we have that we can use?\n    // e.g. 2 Emeralds - 1 Emerald token = 1 Emerald still required\n    const naturalTokenCost = Math.min(\n      remainingRequiredTokens,\n      availableTokensOfColor\n    );\n    remainingRequiredTokens -= naturalTokenCost;\n\n    // e.g. 1 Emeralds - 1 Wild token = 0 Emeralds still required\n    const wildCost = Math.min(remainingRequiredTokens, availableWilds);\n    remainingRequiredTokens -= wildCost;\n\n    // if we aren't able to satisfy the cost, even with wilds,\n    // report the deficit\n    if (remainingRequiredTokens > 0) {\n      cost.tokens[color] = -remainingRequiredTokens;\n    } else {\n      // we're all done with our maths so go ahead and update the return value\n      cost.tokens[color] = (cost.tokens[color] || 0) + naturalTokenCost;\n      cost.tokens[ResourceType.Wild] =\n        (cost.tokens[ResourceType.Wild] || 0) + wildCost;\n\n      // subtract the wilds we had to use from the ones available\n      // so they can't be used again\n      availableWilds -= wildCost;\n    }\n\n    // card costs can only be paid with cards (only report missing cards)\n    const cardDeficit = Math.max(\n      0,\n      requiredCardsOfColor - availableCardsOfColor\n    );\n    cost.cards[color] = (cost.cards[color] || 0) - cardDeficit;\n  }\n\n  return cost;\n};\n\nexport const hasRequiredResources = (\n  required: ResourceTotals,\n  available?: ResourceTotals\n): boolean => {\n  const cost = available ? calculatePayment(required, available) : required;\n  const missingCards = requiresAdditionalResources(cost.cards);\n  const missingResources = requiresAdditionalResources(cost.tokens);\n  return !(missingCards || missingResources);\n};\n\nconst requiresAdditionalResources = (target: ResourceCount | undefined) =>\n  target == null ? false : Object.keys(target).some(key => target[key] < 0);\n\nexport const add = (\n  target: ResourceCount,\n  toMerge: ResourceCount\n): ResourceCount =>\n  Object.keys(toMerge).reduce(\n    (sum, resourceType) => {\n      if (sum[resourceType] != null) {\n        sum[resourceType] = sum[resourceType] + toMerge[resourceType];\n      } else {\n        sum[resourceType] = toMerge[resourceType];\n      }\n\n      return sum;\n    },\n    // clone the input\n    Object.assign({}, target || {}) as ResourceCount\n  );\n\nexport const times = count => <TResult>(\n  f: (i?: number) => TResult\n): TResult[] => {\n  let results: TResult[] = [];\n\n  for (let i = 0; i < count; i++) {\n    results.push(f(i));\n  }\n\n  return results;\n};\n\nexport const randomItem = <T>(items: T[]): T =>\n  items[Math.floor(Math.random() * items.length)];\n\nexport const waitFor = (predicate: () => boolean) =>\n  new Promise((done, reject) => {\n    let count = 0;\n    let timer = setInterval(() => {\n      if (predicate()) {\n        done();\n        clearInterval(timer);\n      } else if (++count >= 10) {\n        reject();\n      }\n    }, 100);\n  });\n\nexport const getCardResourceCount = (cards: DevelopmentCard[]): ResourceCount =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerResourceTotals = ({\n  playedCards,\n  tokens\n}: Player) => ({\n  tokens: tokens,\n  cards: calculateCardResources(playedCards)\n});\n\nexport const calculateCardResources = (cards: DevelopmentCard[]) =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerPrestigePoints = ({\n  patrons,\n  playedCards\n}: Player) =>\n  [...patrons, ...playedCards].reduce(\n    (total, x) => (total += x.prestigePoints),\n    0\n  );\n\nexport const recalculatePlayerTotals = (\n  playerOrState: Player | GameState\n): void => {\n  if (\"id\" in playerOrState) {\n    const player = playerOrState;\n    player.prestigePoints = calculatePlayerPrestigePoints(player);\n  } else {\n    playerOrState.players.forEach(recalculatePlayerTotals);\n  }\n};\n\nexport const findCurrentPlayer = (state: GameState): Player => {\n  const player = findPlayer(state.players, state.currentPlayerId);\n  if (player == null) {\n    throw new Error(\"Couldn't find current player\");\n  }\n  return player;\n};\n\nexport const findPlayer = (\n  players: Player[],\n  playerId: string\n): Player | null =>\n  players == null ? null : players.find(x => x.id === playerId);\n\nexport const clone = <T>(source: T): T => JSON.parse(JSON.stringify(source));\n","import { DevelopmentCard, GameState } from \"../Model\";\nimport { findCurrentPlayer } from \"./utils\";\n\nexport const takeDevelopmentCard = (\n  state: GameState,\n  card: DevelopmentCard\n) => {\n  const player = findCurrentPlayer(state);\n\n  for (let row of state.availableCards) {\n    const matchesCardId = (x: DevelopmentCard) => x && x.id === card.id;\n\n    const topStockCard = row.stock[row.stock.length - 1];\n    const isStockCard = matchesCardId(topStockCard);\n\n    const visibleCardIndex = row.visibleCards.findIndex(matchesCardId);\n    const isVisibleCard = visibleCardIndex > -1;\n\n    if (isStockCard) {\n      row.stock.pop();\n      player.reservedCards.push(card);\n      return;\n    } else if (isVisibleCard) {\n      row.visibleCards[visibleCardIndex] = null;\n      player.reservedCards.push(card);\n      return;\n    }\n  }\n\n  throw new Error(\n    `Couldn't find card ${JSON.stringify(\n      card\n    )} in top card of stock piles or visible cards`\n  );\n};\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerActionCommand,\n  PlayerAction,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectMultipleResources extends PlayerAction {\n  resources: ResourceType[];\n}\n\nexport class CollectMultipleResourcesCommand extends PlayerActionCommand<\n  CollectMultipleResources\n> {\n  execute(state: GameState) {\n    for (let resource of this.action.resources) {\n      state.availableTokens[resource] =\n        (state.availableTokens[resource] || 0) - 1;\n\n      findCurrentPlayer(state).tokens[resource] =\n        (findCurrentPlayer(state).tokens[resource] || 0) + 1;\n    }\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const availableResources = NativeResourceTypes.filter(\n      type => state.availableTokens[type] > 0\n    ).map(x => ResourceType[x] as ResourceType);\n\n    // not enough resources to take three\n    if (availableResources.length < 3) return [];\n\n    // return all combinations of the available resources\n    let actions: [ResourceType, ResourceType, ResourceType][] = [];\n\n    for (let x of availableResources) {\n      for (let y of availableResources.filter(n => n !== x)) {\n        for (let z of availableResources.filter(n => n !== x && n !== y)) {\n          actions.push([x, y, z]);\n        }\n      }\n    }\n\n    return actions.map(resources => ({\n      move: \"collectMultipleResources\",\n      args: [resources]\n    }));\n  };\n}\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectSingleResource extends PlayerAction {\n  resource: ResourceType;\n}\n\nexport class CollectSingleResourceCommand extends PlayerActionCommand<\n  CollectSingleResource\n> {\n  execute(state: GameState) {\n    state.availableTokens[this.action.resource] =\n      (state.availableTokens[this.action.resource] || 0) - 2;\n\n    const player = findCurrentPlayer(state);\n\n    player.tokens[this.action.resource] =\n      (player.tokens[this.action.resource] || 0) + 2;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] =>\n    NativeResourceTypes.filter(type => state.availableTokens[type] >= 2)\n      .map(x => ResourceType[x])\n      .map(resource => ({ move: \"collectSingleResource\", args: [resource] }));\n}\n","import { DevelopmentCard, GameState, ResourceTotals } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport {\n  hasRequiredResources,\n  calculatePayment,\n  deduct,\n  add,\n  calculatePlayerResourceTotals,\n  findCurrentPlayer,\n  takeDevelopmentCard,\n  calculateCardResources\n} from \"../../../util\";\n\nexport interface PurchaseDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class PurchaseDevelopmentCardCommand extends PlayerActionCommand<\n  PurchaseDevelopmentCard\n> {\n  static readonly INSUFFICIENT_FUNDS =\n    \"Player has insufficient funds to purchase this card\";\n\n  static readonly UNAVAILABLE_CARD = \"Card is not available to play\";\n\n  execute(state: GameState) {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't purchase an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    const payment = calculatePayment(\n      card.cost,\n      calculatePlayerResourceTotals(player)\n    );\n\n    if (!hasRequiredResources(payment)) {\n      throw new Error(PurchaseDevelopmentCardCommand.INSUFFICIENT_FUNDS);\n    }\n\n    const isOnTable = state.availableCards.some(row =>\n      row.visibleCards.some(x => x && x.id === card.id)\n    );\n\n    const reservedCard = player.reservedCards.find(x => x.id === card.id);\n\n    if (!reservedCard && !isOnTable) {\n      throw new Error(PurchaseDevelopmentCardCommand.UNAVAILABLE_CARD);\n    }\n\n    // pay for it first - take it from the player...\n    player.tokens = deduct(payment.tokens, player.tokens);\n\n    // ... and add it (back) to the bank\n    state.availableTokens = add(state.availableTokens, payment.tokens);\n\n    // take it from the table\n    if (isOnTable) {\n      takeDevelopmentCard(state, card);\n    }\n    // or take it from the player's hand\n    else if (reservedCard) {\n      player.reservedCards.splice(\n        player.reservedCards.indexOf(reservedCard),\n        1\n      );\n    }\n    // this should never happen since we've already checked for it,\n    // but just to be extra careful...\n    else {\n      throw Error(\"Impossible situation\");\n    }\n\n    // add the card to the collection of played cards\n    player.playedCards.push(card);\n\n    player.prestigePoints = (player.prestigePoints || 0) + card.prestigePoints;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const visibleCards = state.availableCards.flatMap(x => x.visibleCards);\n    const reservedCards = findCurrentPlayer(state).reservedCards;\n    const accessibleCards = [...visibleCards, ...reservedCards].filter(\n      x => x != null\n    );\n\n    const currentPlayer = findCurrentPlayer(state);\n\n    const playerResources: ResourceTotals = {\n      tokens: currentPlayer.tokens,\n      cards: calculateCardResources(currentPlayer.playedCards)\n    };\n\n    const playableCards = accessibleCards.filter(card =>\n      hasRequiredResources(card.cost, playerResources)\n    );\n\n    return playableCards.map(card => ({\n      move: \"purchaseDevelopmentCard\",\n      args: [card]\n    }));\n  };\n}\n","import { DevelopmentCard, GameState } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer, takeDevelopmentCard } from \"../../../util\";\n\nexport interface ReserveDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class ReserveDevelopmentCardCommand extends PlayerActionCommand<\n  ReserveDevelopmentCard\n> {\n  execute(state: GameState): GameState {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't reserve an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    // give the player a wild token\n    if (state.availableTokens.Wild > 0) {\n      player.tokens.Wild = (player.tokens.Wild || 0) + 1;\n      state.availableTokens.Wild = (state.availableTokens.Wild || 0) - 1;\n    }\n\n    // take the card off the table and add a new one in its place\n    takeDevelopmentCard(state, card);\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const player = findCurrentPlayer(state);\n\n    if (player.reservedCards.length >= 4) {\n      return [];\n    }\n\n    return state.availableCards\n      .flatMap(x => x.visibleCards)\n      .filter(x => x != null)\n      .map(card => ({ move: \"reserveDevelopmentCard\", args: [card] }));\n  };\n}\n","import { CollectMultipleResourcesCommand } from \"./collectMultipleResources\";\nimport { CollectSingleResourceCommand } from \"./collectSingleResource\";\nimport { PurchaseDevelopmentCardCommand } from \"./purchaseDevelopmentCard\";\nimport { ReserveDevelopmentCardCommand } from \"./reserveDevelopmentCard\";\nimport { PlayerActionCommand } from \"./PlayerAction\";\nimport { GameContext, GameState } from \"../../../Model\";\n\ninterface GameActionHandler {\n  (G: GameState, ctx: GameContext, ...args): GameState;\n}\n\nexport const getAvailableMoves = (state: GameState) =>\n  [\n    CollectMultipleResourcesCommand,\n    CollectSingleResourceCommand,\n    PurchaseDevelopmentCardCommand,\n    ReserveDevelopmentCardCommand\n  ].flatMap(cmd => cmd.getAvailableMoves(state));\n\nconst executeCommand = (\n  state: GameState,\n  ctx: GameContext,\n  CommandType: { new (...args): PlayerActionCommand },\n  args?\n): GameState => {\n  const cmd = new CommandType(args);\n  return cmd.execute(state);\n};\n\nexport const moves: { [key: string]: GameActionHandler } = {\n  collectMultipleResources: (G, ctx, resources) =>\n    executeCommand(G, ctx, CollectMultipleResourcesCommand, {\n      resources\n    }),\n\n  collectSingleResource: (G, ctx, resource) =>\n    executeCommand(G, ctx, CollectSingleResourceCommand, { resource }),\n\n  purchaseDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, PurchaseDevelopmentCardCommand, { card }),\n\n  reserveDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, ReserveDevelopmentCardCommand, { card })\n};\n\nexport default moves;\n","import { Game } from \"boardgame.io/core\";\nimport { GameState } from \"../../Model\";\nimport moves from \"./moves\";\nimport { initializeGame as setup } from \"./initializeGame\";\nimport { populateVisibleCards } from \"../../util\";\n\nexport type Moves = { [key in keyof typeof moves]: (...args) => void };\n\nexport const SplendidGame = Game<GameState, Moves>({\n  setup,\n\n  moves,\n\n  flow: {\n    movesPerTurn: 1,\n    onTurnBegin: (G, ctx) => {\n      G.currentPlayerId = ctx.currentPlayer;\n    },\n    onTurnEnd: (G, ctx) => {\n      // TODO: evaluate patrons\n      populateVisibleCards(G.availableCards);\n    },\n    endGameIf: G => {\n      const winners = G.players.filter(x => x.prestigePoints >= 15);\n\n      if (winners.length) {\n        return { winner: winners[0].id };\n      }\n    }\n  }\n});\n\nconsole.log(`Moves: ${SplendidGame.moveNames}`);\n","import { importDeck, shuffle, populateVisibleCards } from \"../../util\";\n\nexport const initializeGame = initial => {\n  const deck = importDeck();\n\n  shuffle(deck);\n\n  const availableCards = [\n    {\n      level: 3,\n      stock: deck.filter(x => x.level === 3),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 2,\n      stock: deck.filter(x => x.level === 2),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 1,\n      stock: deck.filter(x => x.level === 1),\n      visibleCards: Array(4).fill(null)\n    }\n  ];\n\n  populateVisibleCards(availableCards);\n\n  const players = Array(initial.numPlayers)\n    .fill(0)\n    .map((_, id) => ({\n      id: String(id),\n      name: `Player ${id + 1}`,\n      isHuman: false,\n      patrons: [],\n      playedCards: [],\n      tokens: {},\n      prestigePoints: 0,\n      reservedCards: [],\n      totalResources: {}\n    }));\n\n  const availableTokens = {\n    Wild: 7,\n    Emerald: 5,\n    Onyx: 5,\n    Ruby: 5,\n    Sapphire: 5,\n    Diamond: 5\n  };\n\n  return {\n    availableCards,\n    availableTokens,\n    players\n  };\n};\n","import React, { useCallback, useState } from \"react\";\nimport { Moves } from \"../game\";\nimport {\n  DevelopmentCard as DevelopmentCardModel,\n  GameState,\n  ResourceType,\n  Player\n} from \"../../Model\";\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\nimport { IBoardProps } from \"boardgame.io/react\";\n\nimport \"./board.css\";\nimport { Box } from \"@material-ui/core\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      color: \"#000\",\n      backgroundColor: \"#fff\",\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n      width: \"calc(100% - 310px)\",\n      height: \"100vh\",\n      display: \"grid\",\n      gridColumnGap: 5,\n      gridRowGap: 5,\n      gridTemplateColumns: \"auto 25%\",\n      gridTemplateRows: \"7em auto 10em\",\n      gridTemplateAreas: `\n        \"tokens    player-list\"\n        \"board     player-list\"\n        \"inventory player-list\"`\n    },\n\n    tokens: {\n      gridArea: \"tokens\",\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n\n      \"& [itemProp='token']\": {\n        display: \"flex\",\n        flexDirection: \"column\",\n        fontSize: \"350%\"\n      },\n\n      \"& [itemProp='token'] [itemProp='resource']\": {},\n\n      \"& [itemProp='token'] [itemProp='count']\": {\n        position: \"absolute\",\n        padding: \".4em\",\n        fontSize: \"60%\",\n        fontWeight: 900\n      },\n\n      \"& [itemprop='resource'][data-value='Onyx'] + [itemProp='count']\": {\n        color: \"#fff\"\n      }\n    },\n\n    board: {\n      gridArea: \"board\",\n      padding: \"0 1rem 0.5rem\"\n    },\n\n    playerList: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      gridArea: \"player-list\",\n      backgroundColor: \"#fff\",\n      padding: \"0.4em\"\n    },\n\n    inventory: {\n      gridArea: \"inventory\"\n    }\n  })\n);\n\nexport const MainBoard: React.FC<\n  Partial<IBoardProps<GameState, Moves>>\n> = props => {\n  const {\n    G: { availableCards, availableTokens, currentPlayerId, players },\n    moves\n  } = props;\n\n  const classes = useStyles({});\n\n  const [selectedTokens, setSelectedTokens] = useState([]);\n  const currentPlayer = players[currentPlayerId];\n  const userPlayer = currentPlayer;\n\n  const selectToken = useCallback(\n    token => {\n      if (token === ResourceType.Wild) {\n        console.debug(`Ignoring invalid selection of a wild token`);\n        return;\n      }\n\n      let newSelectedTokens = selectedTokens;\n\n      if (selectedTokens.indexOf(token) > -1) {\n        if (selectedTokens.length === 1) {\n          moves.collectSingleResource(token);\n          newSelectedTokens = [];\n        } else {\n          console.debug(`Ignoring invalid duplicate selection of ${token}`);\n        }\n      } else {\n        newSelectedTokens = [...selectedTokens, token];\n      }\n\n      if (newSelectedTokens.length === 3) {\n        moves.collectMultipleResources(newSelectedTokens);\n        newSelectedTokens = [];\n      }\n\n      setSelectedTokens(newSelectedTokens);\n    },\n    [moves, selectedTokens]\n  );\n\n  return (\n    <div id=\"container\" className={classes.container}>\n      <div className={classes.tokens}>\n        {Object.keys(availableTokens).map(token => (\n          <div key={token} itemProp=\"token\" onClick={() => selectToken(token)}>\n            <div itemProp=\"resource\" data-value={token}></div>\n            <div itemProp=\"count\" data-value={availableTokens[token]}></div>\n          </div>\n        ))}\n      </div>\n      <div id=\"board\" className={classes.board}>\n        {availableCards.map((row, rowIndex) => (\n          <div key={String(rowIndex)} className=\"cardRow\">\n            <div\n              className=\"stock card valid-action\"\n              onClick={() =>\n                row.stock.length\n                  ? moves.reserveDevelopmentCard(\n                      row.stock[row.stock.length - 1]\n                    )\n                  : false\n              }\n            >\n              <span>{row.stock.length}</span>\n            </div>\n            {Array(4)\n              .fill(0)\n              .map(\n                (_, i) =>\n                  row.visibleCards[i] || ({ id: null } as DevelopmentCardModel)\n              )\n              .map((card, idx) => (\n                <DevelopmentCard\n                  key={card.id || `${row.level}${idx}`}\n                  card={card}\n                  onSelected={() => moves.reserveDevelopmentCard(card)}\n                />\n              ))}\n          </div>\n        ))}\n      </div>\n      <div id=\"player-list\" className={classes.playerList}>\n        {players.map((player: Player) => (\n          <PlayerOverview\n            key={player.id}\n            isCurrentPlayer={player === currentPlayer}\n            player={player}\n          />\n        ))}\n        <div className={`patronRow`}>\n          <div className=\"patron card\">\n            <span>Patron</span>\n          </div>\n          <div className=\"patron card\">\n            <span>Patron</span>\n          </div>\n          <div className=\"patron card\">\n            <span>Patron</span>\n          </div>\n          <div className=\"patron card\">\n            <span>Patron</span>\n          </div>\n          <div className=\"patron card\">\n            <span>Patron</span>\n          </div>\n        </div>\n      </div>\n      <div id=\"inventory\" className={classes.inventory}>\n        <UserPlayerInventory\n          player={userPlayer}\n          onPlayReservedCard={card => moves.purchaseDevelopmentCard(card)}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst DevelopmentCard = ({\n  card,\n  onSelected\n}: {\n  card: DevelopmentCardModel;\n  onSelected(card: DevelopmentCardModel): void;\n}) => (\n  <div\n    className={`card ${card.id ? \"valid-action\" : \"\"}`}\n    itemProp=\"card\"\n    onClick={() => (card.id ? onSelected(card) : false)}\n  >\n    <div itemProp=\"resource\" data-value={card.resourceType}></div>\n    {card && card.prestigePoints > 0 && (\n      <div itemProp=\"prestigePoints\" data-value={card.prestigePoints}></div>\n    )}\n    <div itemProp=\"cost\">\n      {card &&\n        card.cost &&\n        Object.keys(card.cost.tokens).map(resource => (\n          <div key={resource} itemProp=\"token\">\n            <div itemProp=\"resource\" data-value={resource}></div>\n            <div itemProp=\"count\" data-value={card.cost.tokens[resource]}></div>\n          </div>\n        ))}\n    </div>\n  </div>\n);\n\nconst PlayerOverview = ({\n  isCurrentPlayer,\n  player\n}: {\n  isCurrentPlayer: boolean;\n  player: Player;\n}) => (\n  <div\n    className={`player ${isCurrentPlayer && \"active\"}`}\n    itemScope\n    itemType=\"urn:x:player\"\n    itemID={String(player.id)}\n  >\n    <div itemProp=\"name\">\n      {player.name}{\" \"}\n      {isCurrentPlayer && (\n        <span dangerouslySetInnerHTML={{ __html: \"&Star;\" }} />\n      )}\n    </div>\n    <div itemProp=\"prestigePoints\">{player.prestigePoints}</div>\n    <div className=\"inventory\">\n      <PlayerInventory player={player} />\n    </div>\n  </div>\n);\n\ninterface PlayerInventoryProps {\n  player: Player;\n}\n\nconst PlayerInventory = ({\n  player: { playedCards, reservedCards, tokens }\n}: PlayerInventoryProps) => (\n  <div itemProp=\"inventory\">\n    <div className=\"cards\">\n      <div className=\"subtitle\">Reserved Cards</div>\n      <div itemProp=\"card-count\" data-value={reservedCards.length} />\n    </div>\n    <div className=\"cards\">\n      <div className=\"subtitle\">Played Cards</div>\n      <div itemProp=\"card-count\" data-value={playedCards.length} />\n    </div>\n    <div className=\"tokens\">\n      <div className=\"subtitle\">Tokens</div>\n\n      {Object.keys(tokens).map(resource => (\n        <div key={resource} itemProp=\"token\">\n          <div itemProp=\"resource\" data-value={resource}></div>\n          <div itemProp=\"count\" data-value={tokens[resource]}></div>\n        </div>\n      ))}\n    </div>\n  </div>\n);\n\nconst UserPlayerInventory = ({\n  player,\n  onPlayReservedCard\n}: {\n  player: Player;\n  onPlayReservedCard(card: DevelopmentCardModel): void;\n}) => (\n  <Box display=\"flex\" flexDirection=\"row\">\n    {player.reservedCards.map(card => (\n      <DevelopmentCard\n        key={card.id}\n        card={card}\n        onSelected={onPlayReservedCard}\n      />\n    ))}\n  </Box>\n);\n","import { AI, MCTSBot } from \"boardgame.io/ai\";\nimport { MCTSVisualizer } from \"boardgame.io/ai-visualize\";\nimport { getAvailableMoves } from \"./game/moves\";\nimport { GameState } from \"Model\";\nimport { IGameCtx } from \"boardgame.io/core\";\nimport { findPlayer } from \"../util\";\nimport { AIVisualizer } from \"./AIVisualizer\";\n\nconst objective = (\n  multiplier: number,\n  calculateScore: (targetState: GameState) => number\n) => ({\n  weight: 0,\n  checker: function(state: GameState) {\n    const score = calculateScore(state);\n    this.weight = score * multiplier;\n    return this.weight > 0;\n  }\n});\n\nclass Bot extends MCTSBot {\n  constructor(args) {\n    super({\n      ...args,\n      iterations: 100, // default: 1000\n      playoutDepth: 100, // default: 50\n      objectives: function(\n        initialState: GameState,\n        _: IGameCtx,\n        playerId: string\n      ) {\n        if (!playerId) return {};\n\n        const player = findPlayer(initialState.players, playerId);\n\n        return {\n          winGame: objective(\n            Number.POSITIVE_INFINITY,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints >= 15\n                ? 1\n                : 0\n          ),\n          increasePrestigePoints: objective(\n            50,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints -\n              player.prestigePoints\n          )\n        };\n      }\n    });\n  }\n}\n\nexport default AI({\n  bot: Bot,\n  enumerate: getAvailableMoves,\n  visualize: MCTSVisualizer(AIVisualizer)\n});\n","import React from \"react\";\nimport { GameState } from \"Model\";\nimport { findCurrentPlayer } from \"../util\";\n\nexport const AIVisualizer = ({ G }: { G: GameState }) => {\n  const player = findCurrentPlayer(G);\n\n  return player == null ? null : (\n    <div style={{ transform: \"scale(0.4)\" }}>\n      <table>\n        <tr>\n          <th>Prestige</th>\n          <td>{player.prestigePoints}</td>\n        </tr>\n        <tr>\n          <th>Cards</th>\n          <td>\n            P: {player.playedCards} | R: {player.reservedCards}\n          </td>\n        </tr>\n        <tr>\n          <th>Tokens</th>\n          <td>\n            {Object.keys(player.tokens).reduce(\n              (total, tok) => (total += player.tokens[tok]),\n              0\n            )}\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Client } from \"boardgame.io/react\";\nimport game from \"./game\";\nimport board from \"./board\";\nimport ai from \"./ai\";\nimport { observer } from \"mobx-react-lite\";\nimport { GameSettings } from \"./setup/GameSettingsStore\";\n\nconst GameClient = observer<{ settings: GameSettings }>(({ settings }) => {\n  const View = Client({\n    game,\n    board,\n    ai,\n    numPlayers: settings.numberOfPlayers,\n    multiplayer: settings.multiplayer,\n    debug: settings.debug\n  } as any);\n\n  return <View />;\n});\n\nexport default GameClient;\n","import React from \"react\";\nimport GameClient from \"./GameClient\";\nimport { observer } from \"mobx-react-lite\";\n\nconst SplendidGame = observer(() => {\n  return (\n    <GameClient\n      settings={{\n        numberOfPlayers: 2,\n        musicVolume: 0,\n        sfxVolume: 0,\n        players: []\n      }}\n    />\n  );\n});\nSplendidGame.displayName = \"SplendidGame\";\n\nexport default SplendidGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport Splendid from \"./Splendid\";\n\nexport default () => <Splendid />;\n"],"sourceRoot":""}