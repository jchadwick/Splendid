{"version":3,"sources":["Model.ts","util/deckGenerator.ts","util/populateVisibleCards.ts","util/shuffle.ts","util/utils.ts","util/takeDevelopmentCard.ts","Splendid/game/moves/PlayerAction.ts","Splendid/game/moves/collectMultipleResources.ts","Splendid/game/moves/collectSingleResource.ts","Splendid/game/moves/purchaseDevelopmentCard.ts","Splendid/game/moves/reserveDevelopmentCard.ts","Splendid/game/moves/index.ts","Splendid/ai.ts","Splendid/AIVisualizer.tsx","Splendid/board/components.tsx","Splendid/board/GameOver.tsx","Splendid/board/DevelopmentCard.tsx","Splendid/board/MainBoard.tsx","Splendid/board/PlayerList.tsx","Splendid/board/Tokens.tsx","Splendid/board/UserPlayerInventory.tsx","Splendid/board/GameLayout.tsx","Splendid/game/SplendidGame.ts","Splendid/game/initializeGame.ts","Splendid/GameClient.tsx","Splendid/index.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["ResourceType","AllResourceTypes","Object","freeze","keys","filter","x","map","NativeResourceTypes","Wild","blueprints","split","line","length","level","resourceType","cost","prestigePoints","convertBlueprintsToDefinitions","blueprint","placeholders","resourceMap","reduce","idx","replacePlaceholders","source","replacements","replaced","placeholder","replace","RegExp","generateDeck","definitions","isValidDefinition","toDevelopmentCard","definition","isANumber","isResourceType","value","indexOf","input","min","max","parsed","Number","isNaN","id","parseCost","trim","totals","resource","isCard","endsWith","substr","costGroup","cards","tokens","populateVisibleCards","cardRows","forEach","row","visibleCards","stock","pop","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","createResourceCollection","bag","color","calculatePayment","required","available","availableCards","availableTokens","requiredCards","requiredTokens","availableWilds","availableCardsOfColor","availableTokensOfColor","requiredCardsOfColor","requiredTokensOfColor","remainingRequiredTokens","naturalTokenCost","wildCost","cardDeficit","hasRequiredResources","missingCards","requiresAdditionalResources","missingResources","target","some","key","add","toMerge","sum","assign","calculatePlayerResourceTotals","playedCards","calculateCardResources","cardResources","card","findCurrentPlayer","state","player","findPlayer","players","currentPlayerId","Error","playerId","find","takeDevelopmentCard","matchesCardId","isStockCard","visibleCardIndex","findIndex","isVisibleCard","reservedCards","push","JSON","stringify","PlayerActionCommand","action","name","this","__proto__","constructor","CollectMultipleResourcesCommand","resources","getAvailableMoves","availableResources","type","actions","y","n","z","move","args","CollectSingleResourceCommand","PurchaseDevelopmentCardCommand","payment","INSUFFICIENT_FUNDS","from","isOnTable","reservedCard","UNAVAILABLE_CARD","deducted","splice","flatMap","accessibleCards","currentPlayer","playerResources","ReserveDevelopmentCardCommand","executeCommand","ctx","CommandType","execute","err","console","error","moves","triggerWin","g","collectMultipleResources","G","collectSingleResource","purchaseDevelopmentCard","reserveDevelopmentCard","objective","multiplier","calculateScore","weight","checker","score","Bot","iterations","_","turn","playoutDepth","objectives","initialState","winGame","POSITIVE_INFINITY","targetState","increasePrestigePoints","MCTSBot","AI","bot","enumerate","cmd","visualize","MCTSVisualizer","style","transform","total","tok","Column","styled","Box","display","flexDirection","Row","Overlay","position","top","left","width","height","isActive","zIndex","GameOver","results","onClose","userPlayer","Dialog","open","aria-labelledby","DialogTitle","winner","Typography","variant","DialogContent","dividers","gutterBottom","List","rankings","ListItem","fontWeight","ListItemIcon","ListItemText","primary","ListItemSecondaryAction","DialogActions","Button","onClick","DevelopmentCard","onSelected","canSelect","className","itemProp","data-value","Model","MainBoard","selectDevelopmentCard","rowIndex","String","Array","fill","i","PlayerList","isCurrentPlayer","PlayerOverview","itemScope","itemType","itemID","flexGrow","minHeight","fontSize","border","marginTop","justifyContent","flexWrap","PlayedCard","borderRadius","margin","padding","Tokens","selectToken","token","CurrentPlayerName","writingMode","textOrientation","UserPlayerInventory","onPlayReservedCard","groupCards","alignContent","grouped","group","useStyles","makeStyles","createStyles","container","backgroundColor","fontFamily","gridColumnGap","gridRowGap","gridTemplateColumns","gridTemplateRows","gridTemplateAreas","gridArea","alignItems","board","playerList","inventory","GameLayout","props","gameover","playerID","step","classes","useState","isSnackbarVisible","setIsSnackbarVisible","snackbarMessage","setSnackbarMessage","userPlayerId","selectedTokens","setSelectedTokens","otherPlayers","isUserPlayersTurn","useEffect","useCallback","newSelectedTokens","debug","window","location","reload","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","message","SplendidGame","Game","setup","initial","numPlayers","isHuman","patrons","totalResources","deck","importDeck","Emerald","Onyx","Ruby","Sapphire","Diamond","flow","movesPerTurn","onTurnBegin","onTurnEnd","endGameIf","winners","sort","a","b","GameClient","observer","settings","View","Client","game","ai","numberOfPlayers","multiplayer","process","musicVolume","sfxVolume","displayName","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","Splendid","document","getElementById","URL","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.1214032b.chunk.js","sourcesContent":["export interface GameContext {\n  allowedMoves: [];\n  currentPlayer: string;\n  turn: number;\n}\n\nexport enum ResourceType {\n  Wild = \"Wild\",\n  Emerald = \"Emerald\",\n  Sapphire = \"Sapphire\",\n  Ruby = \"Ruby\",\n  Diamond = \"Diamond\",\n  Onyx = \"Onyx\"\n}\n\nexport type ResourceTypes = keyof typeof ResourceType;\n\nexport const AllResourceTypes: ResourceType[] = Object.freeze(\n  Object.keys(ResourceType)\n    .filter(x => typeof x === \"string\")\n    .map(x => ResourceType[x] as ResourceType)\n) as ResourceType[];\n\nexport const NativeResourceTypes = Object.freeze(\n  Object.keys(ResourceType).filter(x => x !== ResourceType.Wild)\n);\n\nexport type ResourceCount = { [key in ResourceTypes]?: number | undefined };\n\nexport interface Resource {\n  readonly kind: ResourceType;\n}\n\nexport interface ResourceTotals {\n  tokens?: ResourceCount;\n  cards?: ResourceCount;\n}\n\nexport interface DevelopmentCard {\n  readonly id: string;\n  readonly level: number;\n  readonly cost: ResourceTotals;\n  readonly resourceType: ResourceType;\n  readonly prestigePoints: number;\n}\n\nexport interface Patron {\n  readonly name: string;\n  readonly cost: ResourceTotals;\n  readonly prestigePoints: number;\n}\n\nexport interface Player {\n  id: string;\n  name: string;\n  isHuman: boolean;\n  patrons: Patron[];\n  playedCards: DevelopmentCard[];\n  reservedCards: DevelopmentCard[];\n  tokens: ResourceCount;\n  prestigePoints: number;\n}\n\nexport interface DevelopmentCardRow {\n  level: number;\n  stock: DevelopmentCard[];\n  visibleCards: DevelopmentCard[];\n}\n\nexport interface GameState {\n  availableCards: DevelopmentCardRow[];\n  availableTokens: ResourceCount;\n  players: Player[];\n  currentPlayerId: string;\n}\n\nexport interface GameResults {\n  winner: Player;\n  rankings: Player[];\n}\n","import {\n  DevelopmentCard,\n  ResourceType,\n  ResourceTotals,\n  NativeResourceTypes\n} from \"../Model\";\n\n/*\n    CSV file contains the definitions for ONE color,\n    so use this as a blueprint to loop through all the colors\n  */\nconst blueprints = `\n1,E,{A} & {B} & {B},0\n1,E,{A} & {A} & {C} & {C},0\n1,E,{C} & {C} & {C},0\n1,E,{A} & {B} & {C} & {D},0\n1,E,{A} & {C} & {C} & {D} & {D},0\n1,E,{A} & {B} & {C} & {D} & {D},0\n1,E,{D} & {D} & {D} & {D},1\n\n2,E,{D} & {D} & {D} & {A} & {A} & {B} & {B}, 1\n2,E,{E} & {E} & {C} & {C} & {C} & {B} & {B} & {B}, 1\n2,E,{B} & {B} & {B} & {B} & {D} & {A} & {A}, 2\n2,E,{B} & {B} & {B} & {B} & {B}, 2\n2,E,{B} & {B} & {B} & {B} & {B} & {A} & {A} & {A}, 2\n2,E,{E} & {E} & {E} & {E} & {E} & {E}, 3\n\n3,E,{C} & {C} & {C} & {D} & {D} & {D} & {A} & {A} & {A} & {B} & {B} & {B} & {B} & {B},3\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E} & {B} & {B} & {B},4\n3,E,{A} & {A} & {A} & {A} & {A} & {A} & {A} & {E} & {E} & {E},5`\n  .split(/\\n/)\n  .filter(line => line && line.length)\n  .map(line => line.split(\",\"))\n  .map(\n    ([level, resourceType, cost, prestigePoints]) =>\n      ({\n        level,\n        resourceType,\n        cost,\n        prestigePoints\n      } as DevelopmentCardDefinition)\n  );\n\ntype DevelopmentCardDefinition = {\n  [key in keyof Omit<DevelopmentCard, \"id\">]: string;\n};\n\nexport const importDeck = () => {\n  const definitions = [\n    // matrix containing all variations of the placeholders coming first\n    [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    [\"B\", \"C\", \"D\", \"E\", \"A\"],\n    [\"C\", \"D\", \"E\", \"A\", \"B\"],\n    [\"D\", \"E\", \"A\", \"B\", \"C\"],\n    [\"E\", \"A\", \"B\", \"C\", \"D\"]\n  ].flatMap(placeholders =>\n    convertBlueprintsToDefinitions(blueprints, placeholders)\n  );\n\n  return generateDeck(definitions);\n};\n\n/** Generates the set of cards from the blueprint for a single resource */\nconst convertBlueprintsToDefinitions = (\n  blueprint,\n  placeholders\n): DevelopmentCardDefinition[] => {\n  // create the mapping from placeholders to their actual values,\n  // e.g. \"A\" -> \"Gold\", \"B\" -> \"Silver\", etc.\n  const resourceMap = placeholders.reduce((map, x, idx) => {\n    map[x] = NativeResourceTypes[idx];\n    return map;\n  }, {});\n\n  return blueprint.map(\n    ({ cost, level, prestigePoints, resourceType }) =>\n      ({\n        cost: replacePlaceholders(cost, placeholders, resourceMap),\n        level: level,\n        prestigePoints: prestigePoints,\n        resourceType: resourceMap[resourceType]\n      } as DevelopmentCardDefinition)\n  );\n};\n\nconst replacePlaceholders = (source, placeholders, replacements) =>\n  placeholders.reduce(\n    (replaced, placeholder) =>\n      replaced.replace(\n        new RegExp(`{${placeholder}}`, \"g\"),\n        replacements[placeholder]\n      ),\n    source\n  );\n\nexport const generateDeck = (definitions: DevelopmentCardDefinition[]) =>\n  definitions.filter(isValidDefinition).map(toDevelopmentCard);\n\nconst isValidDefinition = (definition: DevelopmentCardDefinition) =>\n  definition &&\n  !!definition.cost &&\n  isANumber(definition.level, 1, 3) &&\n  isResourceType(definition.resourceType) &&\n  isANumber(definition.prestigePoints, 0, 10);\n\nconst isResourceType = value => Object.keys(ResourceType).indexOf(value) > -1;\n\nconst isANumber = (input: string, min: number, max: number) =>\n  ((parsed: number) => !Number.isNaN(parsed) && parsed >= min && parsed <= max)(\n    Number(input)\n  );\n\nconst toDevelopmentCard = (\n  { cost, level, prestigePoints, resourceType }: DevelopmentCardDefinition,\n  id: number\n): DevelopmentCard => ({\n  id: `${id}_L${level}_${resourceType}`,\n  level: Number(level),\n  resourceType: ResourceType[resourceType],\n  cost: parseCost(cost),\n  prestigePoints: Number(prestigePoints)\n});\n\nconst parseCost = (cost: string): ResourceTotals =>\n  (cost || \"\")\n    .split(\"&\")\n    .map(x => x.trim())\n    .reduce(\n      (totals, resource) => {\n        const isCard = resource.endsWith(\"Card\");\n\n        const resourceType = isCard\n          ? resource.substr(0, resource.length - \"Card\".length)\n          : resource;\n\n        const costGroup = totals[isCard ? \"cards\" : \"tokens\"];\n        costGroup[resourceType] = (costGroup[resourceType] || 0) + 1;\n\n        return totals;\n      },\n      { cards: {}, tokens: {} } as ResourceTotals\n    );\n","import { DevelopmentCardRow } from \"../Model\";\n\nexport const populateVisibleCards = (cardRows: DevelopmentCardRow[]) => {\n  cardRows.forEach(row => {\n    for (let x = 0; x < row.visibleCards.length; x++) {\n      if (row.visibleCards[x] == null && row.stock.length !== 0) {\n        row.visibleCards[x] = row.stock.pop();\n      }\n    }\n  });\n};\n","/**\n * Randomly shuffle an array\n * https://stackoverflow.com/a/2450976/1293256\n * @param  {Array} array The array to shuffle\n * @return {String}      The first item in the shuffled array\n */\nexport const shuffle = function(array) {\n  var currentIndex = array.length;\n  var temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import {\n  ResourceTotals,\n  Resource,\n  ResourceType,\n  ResourceCount,\n  ResourceTypes,\n  NativeResourceTypes,\n  DevelopmentCard,\n  Player,\n  GameState\n} from \"../Model\";\n\nexport const deduct = (\n  cost: ResourceCount,\n  from: ResourceCount\n): ResourceCount =>\n  Object.keys(cost).reduce(\n    (deducted, resourceType) => {\n      if (deducted[resourceType] != null) {\n        deducted[resourceType] = deducted[resourceType] - cost[resourceType];\n      } else {\n        deducted[resourceType] = -cost[resourceType];\n      }\n\n      return deducted;\n    },\n    // clone the input\n    Object.assign({}, from || {}) as ResourceCount\n  );\n\nexport const getGemCount = (\n  tokens: (Resource | ResourceType | ResourceTypes)[]\n): ResourceCount =>\n  Object.keys(ResourceType).reduce((counts, color) => {\n    const total = tokens\n      .map(x => (typeof x === \"string\" ? color : x.kind))\n      .filter(x => x === color).length;\n\n    counts[color] = (counts[color] == null ? 0 : counts[color]) + total;\n\n    return counts;\n  }, {}) as ResourceCount;\n\nexport const createResourceCollection = (): ResourceCount =>\n  Object.keys(ResourceType).reduce(\n    // eslint-disable-next-line\n    (bag, color) => ((bag[color] = 0), bag),\n    {} as ResourceCount\n  );\n\n/**\n * Determines what a player will have to pay in order to purchase an item\n *\n * @param required the item's cost\n * @param available the resources currently available\n *\n * @returns the set of resources that will satisfy the required cost\n * Any resource requirements that can't be met will be identified with a negative cost\n */\nexport const calculatePayment = (\n  required: ResourceTotals,\n  available: ResourceTotals\n): ResourceTotals => {\n  const availableCards = (available && available.cards) || {};\n  const availableTokens = (available && available.tokens) || {};\n  const requiredCards = (required && required.cards) || {};\n  const requiredTokens = (required && required.tokens) || {};\n\n  // store this outside so we can keep track as we use them\n  let availableWilds = availableTokens[ResourceType.Wild] || 0;\n\n  let cost = {\n    cards: createResourceCollection(),\n    tokens: createResourceCollection()\n  };\n\n  for (let color of NativeResourceTypes) {\n    const availableCardsOfColor = availableCards[color] || 0;\n    const availableTokensOfColor = availableTokens[color] || 0;\n    const requiredCardsOfColor = requiredCards[color] || 0;\n    const requiredTokensOfColor = requiredTokens[color] || 0;\n\n    // Don't waste time figuring out how to pay for things that aren't required\n    if (requiredCardsOfColor + requiredTokensOfColor === 0) {\n      continue;\n    }\n\n    /* Example:\n        Required: 3 Emeralds\n        Available Cards: 1 Emerald\n        Available Tokens: 1 Emerald, 1 Wild\n        == Cost:  1 Emerald, 1 Wild\n      */\n\n    // e.g. 3 Emeralds\n    let remainingRequiredTokens = requiredTokensOfColor;\n\n    // factor in the cards we have (i.e. tokens we get for \"free\");\n    // e.g. 3 Emeralds - 1 Emerald card = 2 Emeralds still required\n    const cardDiscount = Math.min(\n      remainingRequiredTokens,\n      availableCardsOfColor\n    );\n    remainingRequiredTokens -= cardDiscount;\n\n    // how many natural tokens do we have that we can use?\n    // e.g. 2 Emeralds - 1 Emerald token = 1 Emerald still required\n    const naturalTokenCost = Math.min(\n      remainingRequiredTokens,\n      availableTokensOfColor\n    );\n    remainingRequiredTokens -= naturalTokenCost;\n\n    // e.g. 1 Emeralds - 1 Wild token = 0 Emeralds still required\n    const wildCost = Math.min(remainingRequiredTokens, availableWilds);\n    remainingRequiredTokens -= wildCost;\n\n    // if we aren't able to satisfy the cost, even with wilds,\n    // report the deficit\n    if (remainingRequiredTokens > 0) {\n      cost.tokens[color] = -remainingRequiredTokens;\n    } else {\n      // we're all done with our maths so go ahead and update the return value\n      cost.tokens[color] = (cost.tokens[color] || 0) + naturalTokenCost;\n      cost.tokens[ResourceType.Wild] =\n        (cost.tokens[ResourceType.Wild] || 0) + wildCost;\n\n      // subtract the wilds we had to use from the ones available\n      // so they can't be used again\n      availableWilds -= wildCost;\n    }\n\n    // card costs can only be paid with cards (only report missing cards)\n    const cardDeficit = Math.max(\n      0,\n      requiredCardsOfColor - availableCardsOfColor\n    );\n    cost.cards[color] = (cost.cards[color] || 0) - cardDeficit;\n  }\n\n  return cost;\n};\n\nexport const hasRequiredResources = (\n  required: ResourceTotals,\n  available?: ResourceTotals\n): boolean => {\n  const cost = available ? calculatePayment(required, available) : required;\n  const missingCards = requiresAdditionalResources(cost.cards);\n  const missingResources = requiresAdditionalResources(cost.tokens);\n  return !(missingCards || missingResources);\n};\n\nconst requiresAdditionalResources = (target: ResourceCount | undefined) =>\n  target == null ? false : Object.keys(target).some(key => target[key] < 0);\n\nexport const add = (\n  target: ResourceCount,\n  toMerge: ResourceCount\n): ResourceCount =>\n  Object.keys(toMerge).reduce(\n    (sum, resourceType) => {\n      if (sum[resourceType] != null) {\n        sum[resourceType] = sum[resourceType] + toMerge[resourceType];\n      } else {\n        sum[resourceType] = toMerge[resourceType];\n      }\n\n      return sum;\n    },\n    // clone the input\n    Object.assign({}, target || {}) as ResourceCount\n  );\n\nexport const times = count => <TResult>(\n  f: (i?: number) => TResult\n): TResult[] => {\n  let results: TResult[] = [];\n\n  for (let i = 0; i < count; i++) {\n    results.push(f(i));\n  }\n\n  return results;\n};\n\nexport const randomItem = <T>(items: T[]): T =>\n  items[Math.floor(Math.random() * items.length)];\n\nexport const waitFor = (predicate: () => boolean) =>\n  new Promise((done, reject) => {\n    let count = 0;\n    let timer = setInterval(() => {\n      if (predicate()) {\n        done();\n        clearInterval(timer);\n      } else if (++count >= 10) {\n        reject();\n      }\n    }, 100);\n  });\n\nexport const getCardResourceCount = (cards: DevelopmentCard[]): ResourceCount =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerResourceTotals = ({\n  playedCards,\n  tokens\n}: Player) => ({\n  tokens: tokens,\n  cards: calculateCardResources(playedCards)\n});\n\nexport const calculateCardResources = (cards: DevelopmentCard[]) =>\n  cards.reduce(\n    (cardResources, card) => {\n      cardResources[card.resourceType] =\n        (cardResources[card.resourceType] || 0) + 1;\n      return cardResources;\n    },\n    {} as ResourceCount\n  );\n\nexport const calculatePlayerPrestigePoints = ({\n  patrons,\n  playedCards\n}: Player) =>\n  [...patrons, ...playedCards].reduce(\n    (total, x) => (total += x.prestigePoints),\n    0\n  );\n\nexport const recalculatePlayerTotals = (\n  playerOrState: Player | GameState\n): void => {\n  if (\"id\" in playerOrState) {\n    const player = playerOrState;\n    player.prestigePoints = calculatePlayerPrestigePoints(player);\n  } else {\n    playerOrState.players.forEach(recalculatePlayerTotals);\n  }\n};\n\nexport const findCurrentPlayer = (state: GameState): Player => {\n  const player = findPlayer(state.players, state.currentPlayerId);\n  if (player == null) {\n    throw new Error(\"Couldn't find current player\");\n  }\n  return player;\n};\n\nexport const findPlayer = (\n  players: Player[],\n  playerId: string\n): Player | null =>\n  players == null ? null : players.find(x => x.id === playerId);\n\nexport const clone = <T>(source: T): T => JSON.parse(JSON.stringify(source));\n","import { DevelopmentCard, GameState } from \"../Model\";\nimport { findCurrentPlayer } from \"./utils\";\n\nexport const takeDevelopmentCard = (\n  state: GameState,\n  card: DevelopmentCard\n) => {\n  const player = findCurrentPlayer(state);\n\n  for (let row of state.availableCards) {\n    const matchesCardId = (x: DevelopmentCard) => x && x.id === card.id;\n\n    const topStockCard = row.stock[row.stock.length - 1];\n    const isStockCard = matchesCardId(topStockCard);\n\n    const visibleCardIndex = row.visibleCards.findIndex(matchesCardId);\n    const isVisibleCard = visibleCardIndex > -1;\n\n    if (isStockCard) {\n      row.stock.pop();\n      player.reservedCards.push(card);\n      return;\n    } else if (isVisibleCard) {\n      row.visibleCards[visibleCardIndex] = null;\n      player.reservedCards.push(card);\n      return;\n    }\n  }\n\n  throw new Error(\n    `Couldn't find card ${JSON.stringify(\n      card\n    )} in top card of stock piles or visible cards`\n  );\n};\n","import { GameState } from \"../../../Model\";\nimport { moves } from \"./index\";\n\nexport interface PlayerAction {}\n\ntype PlayerActionCommandType = typeof PlayerActionCommand;\n\nexport type AvailableMove = { move: keyof typeof moves; args: any[] };\n\nexport interface PlayerActionCommandStatic extends PlayerActionCommandType {\n  getAvailableMoves(gameState: GameState): AvailableMove[];\n}\n\nexport abstract class PlayerActionCommand<T = any> {\n  hash(): string {\n    return JSON.stringify({\n      name: (this as any).__proto__.constructor.name,\n      action: this.action\n    });\n  }\n\n  constructor(public readonly action: T) {}\n  abstract execute(gameState: GameState): GameState;\n}\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerActionCommand,\n  PlayerAction,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectMultipleResources extends PlayerAction {\n  resources: ResourceType[];\n}\n\nexport class CollectMultipleResourcesCommand extends PlayerActionCommand<\n  CollectMultipleResources\n> {\n  execute(state: GameState) {\n    for (let resource of this.action.resources) {\n      state.availableTokens[resource] =\n        (state.availableTokens[resource] || 0) - 1;\n\n      findCurrentPlayer(state).tokens[resource] =\n        (findCurrentPlayer(state).tokens[resource] || 0) + 1;\n    }\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const availableResources = NativeResourceTypes.filter(\n      type => state.availableTokens[type] > 0\n    ).map(x => ResourceType[x] as ResourceType);\n\n    // not enough resources to take three\n    if (availableResources.length < 3) return [];\n\n    // return all combinations of the available resources\n    let actions: [ResourceType, ResourceType, ResourceType][] = [];\n\n    for (let x of availableResources) {\n      for (let y of availableResources.filter(n => n !== x)) {\n        for (let z of availableResources.filter(n => n !== x && n !== y)) {\n          actions.push([x, y, z]);\n        }\n      }\n    }\n\n    return actions.map(resources => ({\n      move: \"collectMultipleResources\",\n      args: [resources]\n    }));\n  };\n}\n","import { GameState, ResourceType, NativeResourceTypes } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer } from \"../../../util\";\n\nexport interface CollectSingleResource extends PlayerAction {\n  resource: ResourceType;\n}\n\nexport class CollectSingleResourceCommand extends PlayerActionCommand<\n  CollectSingleResource\n> {\n  execute(state: GameState) {\n    state.availableTokens[this.action.resource] =\n      (state.availableTokens[this.action.resource] || 0) - 2;\n\n    const player = findCurrentPlayer(state);\n\n    player.tokens[this.action.resource] =\n      (player.tokens[this.action.resource] || 0) + 2;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] =>\n    NativeResourceTypes.filter(type => state.availableTokens[type] >= 2)\n      .map(x => ResourceType[x])\n      .map(resource => ({ move: \"collectSingleResource\", args: [resource] }));\n}\n","import { DevelopmentCard, GameState, ResourceTotals } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport {\n  hasRequiredResources,\n  calculatePayment,\n  deduct,\n  add,\n  calculatePlayerResourceTotals,\n  findCurrentPlayer,\n  takeDevelopmentCard,\n  calculateCardResources\n} from \"../../../util\";\n\nexport interface PurchaseDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class PurchaseDevelopmentCardCommand extends PlayerActionCommand<\n  PurchaseDevelopmentCard\n> {\n  static readonly INSUFFICIENT_FUNDS =\n    \"Player has insufficient funds to purchase this card\";\n\n  static readonly UNAVAILABLE_CARD = \"Card is not available to play\";\n\n  execute(state: GameState) {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't purchase an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    const payment = calculatePayment(\n      card.cost,\n      calculatePlayerResourceTotals(player)\n    );\n\n    if (!hasRequiredResources(payment)) {\n      throw new Error(PurchaseDevelopmentCardCommand.INSUFFICIENT_FUNDS);\n    }\n\n    const isOnTable = state.availableCards.some(row =>\n      row.visibleCards.some(x => x && x.id === card.id)\n    );\n\n    let reservedCard = player.reservedCards.find(x => x.id === card.id);\n\n    if (!reservedCard && !isOnTable) {\n      throw new Error(PurchaseDevelopmentCardCommand.UNAVAILABLE_CARD);\n    }\n\n    // pay for it first - take it from the player...\n    player.tokens = deduct(payment.tokens, player.tokens);\n\n    // ... and add it (back) to the bank\n    state.availableTokens = add(state.availableTokens, payment.tokens);\n\n    // take it from the table\n    if (isOnTable) {\n      takeDevelopmentCard(state, card);\n      reservedCard = card;\n    }\n\n    // take it from the player's hand\n    player.reservedCards.splice(player.reservedCards.indexOf(reservedCard), 1);\n\n    // add the card to the collection of played cards\n    player.playedCards.push(card);\n\n    player.prestigePoints = (player.prestigePoints || 0) + card.prestigePoints;\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const visibleCards = state.availableCards.flatMap(x => x.visibleCards);\n    const { reservedCards } = findCurrentPlayer(state);\n    const accessibleCards = [...visibleCards, ...reservedCards].filter(\n      x => x != null\n    );\n\n    const currentPlayer = findCurrentPlayer(state);\n\n    const playerResources: ResourceTotals = {\n      tokens: currentPlayer.tokens,\n      cards: calculateCardResources(currentPlayer.playedCards)\n    };\n\n    const playableCards = accessibleCards.filter(card =>\n      hasRequiredResources(card.cost, playerResources)\n    );\n\n    return playableCards.map(card => ({\n      move: \"purchaseDevelopmentCard\",\n      args: [card]\n    }));\n  };\n}\n","import { DevelopmentCard, GameState } from \"../../../Model\";\nimport {\n  PlayerAction,\n  PlayerActionCommand,\n  AvailableMove\n} from \"./PlayerAction\";\nimport { findCurrentPlayer, takeDevelopmentCard } from \"../../../util\";\n\nexport interface ReserveDevelopmentCard extends PlayerAction {\n  card: DevelopmentCard;\n}\n\nexport class ReserveDevelopmentCardCommand extends PlayerActionCommand<\n  ReserveDevelopmentCard\n> {\n  execute(state: GameState): GameState {\n    const card = this.action.card;\n\n    if (card == null) {\n      throw new Error(\"Can't reserve an empty card!\");\n    }\n\n    const player = findCurrentPlayer(state);\n\n    // give the player a wild token\n    if (state.availableTokens.Wild > 0) {\n      player.tokens.Wild = (player.tokens.Wild || 0) + 1;\n      state.availableTokens.Wild = (state.availableTokens.Wild || 0) - 1;\n    }\n\n    // take the card off the table and add a new one in its place\n    takeDevelopmentCard(state, card);\n\n    return state;\n  }\n\n  static readonly getAvailableMoves = (state: GameState): AvailableMove[] => {\n    const player = findCurrentPlayer(state);\n\n    if (player.reservedCards.length >= 4) {\n      return [];\n    }\n\n    return state.availableCards\n      .flatMap(x => x.visibleCards)\n      .filter(x => x != null)\n      .map(card => ({ move: \"reserveDevelopmentCard\", args: [card] }));\n  };\n}\n","import { CollectMultipleResourcesCommand } from \"./collectMultipleResources\";\nimport { CollectSingleResourceCommand } from \"./collectSingleResource\";\nimport { PurchaseDevelopmentCardCommand } from \"./purchaseDevelopmentCard\";\nimport { ReserveDevelopmentCardCommand } from \"./reserveDevelopmentCard\";\nimport { PlayerActionCommand } from \"./PlayerAction\";\nimport { GameContext, GameState } from \"../../../Model\";\nimport { findCurrentPlayer } from \"../../../util\";\n\ninterface GameActionHandler {\n  (G: GameState, ctx: GameContext, ...args): GameState;\n}\n\nexport const getAvailableMoves = (state: GameState) =>\n  [\n    CollectMultipleResourcesCommand,\n    CollectSingleResourceCommand,\n    PurchaseDevelopmentCardCommand,\n    ReserveDevelopmentCardCommand\n  ].flatMap(cmd => cmd.getAvailableMoves(state));\n\nconst executeCommand = (\n  state: GameState,\n  ctx: GameContext,\n  CommandType: { new (...args): PlayerActionCommand },\n  args?\n): GameState => {\n  try {\n    const cmd = new CommandType(args);\n    return cmd.execute(state);\n  } catch (err) {\n    console.error(err);\n    return state;\n  }\n};\n\nexport const moves: { [key: string]: GameActionHandler } = {\n  triggerWin: g => {\n    const player = findCurrentPlayer(g);\n    player.prestigePoints = 15;\n    return g;\n  },\n  collectMultipleResources: (G, ctx, resources) =>\n    executeCommand(G, ctx, CollectMultipleResourcesCommand, {\n      resources\n    }),\n\n  collectSingleResource: (G, ctx, resource) =>\n    executeCommand(G, ctx, CollectSingleResourceCommand, { resource }),\n\n  purchaseDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, PurchaseDevelopmentCardCommand, { card }),\n\n  reserveDevelopmentCard: (G, ctx, card) =>\n    executeCommand(G, ctx, ReserveDevelopmentCardCommand, { card })\n};\n\nexport default moves;\n","import { AI, MCTSBot } from \"boardgame.io/ai\";\nimport { MCTSVisualizer } from \"boardgame.io/ai-visualize\";\nimport { IGameCtx } from \"boardgame.io/core\";\nimport { GameState } from \"Model\";\nimport { findPlayer } from \"../util\";\nimport { AIVisualizer } from \"./AIVisualizer\";\nimport { getAvailableMoves } from \"./game/moves\";\n\nconst objective = (\n  multiplier: number,\n  calculateScore: (targetState: GameState) => number\n) => ({\n  weight: 0,\n  checker: function(state: GameState) {\n    const score = calculateScore(state);\n    this.weight = score * multiplier;\n    return this.weight > 0;\n  }\n});\n\nclass Bot extends MCTSBot {\n  constructor(args) {\n    super({\n      ...args,\n      iterations: (_, ctx: IGameCtx) => 100 + ctx.turn * 2,\n      playoutDepth: (_, ctx: IGameCtx) => 50,\n      objectives: function(\n        initialState: GameState,\n        _: IGameCtx,\n        playerId: string\n      ) {\n        if (!playerId) return {};\n\n        const player = findPlayer(initialState.players, playerId);\n\n        return {\n          winGame: objective(\n            Number.POSITIVE_INFINITY,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints >= 15\n                ? 1\n                : 0\n          ),\n          increasePrestigePoints: objective(\n            50,\n            (targetState: GameState): number =>\n              findPlayer(targetState.players, playerId).prestigePoints -\n              player.prestigePoints\n          )\n        };\n      }\n    });\n  }\n}\n\nexport default AI({\n  bot: Bot,\n  enumerate: getAvailableMoves,\n  visualize: MCTSVisualizer(AIVisualizer)\n});\n","import React from \"react\";\nimport { GameState } from \"Model\";\nimport { findCurrentPlayer } from \"../util\";\n\nexport const AIVisualizer = ({ G }: { G: GameState }) => {\n  const player = findCurrentPlayer(G);\n\n  return player == null ? null : (\n    <div style={{ transform: \"scale(0.4)\" }}>\n      <table>\n        <tr>\n          <th>Prestige</th>\n          <td>{player.prestigePoints}</td>\n        </tr>\n        <tr>\n          <th>Cards</th>\n          <td>\n            P: {player.playedCards} | R: {player.reservedCards}\n          </td>\n        </tr>\n        <tr>\n          <th>Tokens</th>\n          <td>\n            {Object.keys(player.tokens).reduce(\n              (total, tok) => (total += player.tokens[tok]),\n              0\n            )}\n          </td>\n        </tr>\n      </table>\n    </div>\n  );\n};\n","import { Box } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/styles\";\n\nexport const Column = styled(Box)({ display: \"flex\", flexDirection: \"column\" });\n\nexport const Row = styled(Box)({ display: \"flex\", flexDirection: \"row\" });\n\nexport const Overlay = styled(\"div\")({\n  position: \"absolute\",\n  top: 0,\n  left: 0,\n  width: \"100vw\",\n  height: ({ isActive }: { isActive: boolean }) => `${isActive ? 100 : 0}vh`,\n  zIndex: 1000\n});\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemSecondaryAction,\n  ListItemText,\n  Typography\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { GameResults, Player } from \"../../Model\";\n\ninterface GameOverProps {\n  userPlayer: Player;\n  results: GameResults;\n  onClose(): any;\n}\n\nexport const GameOver = ({ results, onClose, userPlayer }: GameOverProps) => (\n  <Dialog open onClose={onClose} aria-labelledby=\"customized-dialog-title\">\n    <DialogTitle>\n      {results.winner === userPlayer ? (\n        <Typography variant=\"h3\">YOU WIN!</Typography>\n      ) : (\n        <Typography variant=\"h3\">You Lose!</Typography>\n      )}\n    </DialogTitle>\n    <DialogContent dividers>\n      <Typography gutterBottom variant=\"h4\">\n        Player Rankings\n      </Typography>\n      <List>\n        {results.rankings.map((player, idx) => (\n          <ListItem\n            key={player.id}\n            style={{\n              fontWeight: 800,\n              color: player === userPlayer ? \"blue\" : \"\"\n            }}\n          >\n            <ListItemIcon>\n              <span>{idx + 1}</span>\n            </ListItemIcon>\n            <ListItemText primary={player.name} />\n            <ListItemSecondaryAction>\n              {player.prestigePoints}\n            </ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </DialogContent>\n    <DialogActions>\n      <Button onClick={onClose} color=\"primary\">\n        New Game\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n","import React from \"react\";\nimport * as Model from \"../../Model\";\n\nexport const DevelopmentCard = ({\n  card,\n  onSelected,\n  canSelect\n}: {\n  card: Model.DevelopmentCard;\n  canSelect?: boolean;\n  onSelected(card: Model.DevelopmentCard): void;\n}) => (\n  <div\n    className={`card ${card.id || canSelect ? \"valid-action\" : \"\"} ${\n      card.resourceType\n    }`}\n    itemProp=\"card\"\n    onClick={() => (card.id || canSelect ? onSelected(card) : false)}\n  >\n    <div itemProp=\"resource\" data-value={card.resourceType} />\n    {card && card.prestigePoints > 0 && (\n      <div itemProp=\"prestigePoints\" data-value={card.prestigePoints} />\n    )}\n    <div itemProp=\"cost\">\n      {card &&\n        card.cost &&\n        Model.AllResourceTypes.filter(\n          resource => card.cost.tokens[resource] > 0\n        ).map(resource => (\n          <div key={resource} itemProp=\"token\">\n            <div itemProp=\"resource\" data-value={resource} />\n            <div itemProp=\"count\" data-value={card.cost.tokens[resource]} />\n          </div>\n        ))}\n    </div>\n  </div>\n);\n","import React from \"react\";\nimport * as Model from \"../../Model\";\nimport { DevelopmentCard } from \"./DevelopmentCard\";\n\nexport const MainBoard = ({ availableCards, selectDevelopmentCard }) => (\n  <>\n    {availableCards.map((row, rowIndex) => (\n      <div key={String(rowIndex)} className=\"cardRow\">\n        <div\n          className=\"stock card valid-action\"\n          onClick={() =>\n            row.stock.length\n              ? selectDevelopmentCard(row.stock[row.stock.length - 1])\n              : false\n          }\n        >\n          <span>{row.stock.length}</span>\n        </div>\n        {Array(4)\n          .fill(0)\n          .map(\n            (_, i) =>\n              row.visibleCards[i] || ({ id: null } as Model.DevelopmentCard)\n          )\n          .map((card, idx) => (\n            <DevelopmentCard\n              key={card.id || `${row.level}${idx}`}\n              card={card}\n              onSelected={selectDevelopmentCard}\n            />\n          ))}\n      </div>\n    ))}\n  </>\n);\n","import { Box } from \"@material-ui/core\";\nimport React from \"react\";\nimport * as Model from \"../../Model\";\nimport { Column, Row } from \"./components\";\n\nexport const PlayerList = ({ players, currentPlayer }) => (\n  <>\n    {players.map((player: Model.Player) => (\n      <PlayerOverview\n        key={player.id}\n        isCurrentPlayer={player === currentPlayer}\n        player={player}\n      />\n    ))}\n  </>\n);\n\nconst PlayerOverview = ({\n  isCurrentPlayer,\n  player\n}: {\n  isCurrentPlayer: boolean;\n  player: Model.Player;\n}) => (\n  <Column\n    className={`player ${isCurrentPlayer && \"active\"}`}\n    itemScope\n    itemType=\"urn:x:player\"\n    itemID={String(player.id)}\n  >\n    <Row>\n      <Box flexGrow={1} itemProp=\"name\">\n        {player.name}\n      </Box>\n      <Box fontWeight={800}>{player.prestigePoints}</Box>\n    </Row>\n    <Box\n      className=\"tokens\"\n      minHeight=\"4em\"\n      fontSize=\"40%\"\n      border=\"1px ridge #ccc\"\n    >\n      {Object.keys(player.tokens).map(\n        resource =>\n          player.tokens[resource] > 0 && (\n            <div key={resource} itemProp=\"token\">\n              <div itemProp=\"resource\" data-value={resource} />\n              <div itemProp=\"count\" data-value={player.tokens[resource]} />\n            </div>\n          )\n      )}\n    </Box>\n    <Row\n      className=\"inventory\"\n      flexGrow={1}\n      minHeight=\"10em\"\n      marginTop=\"1em\"\n      border=\"1px ridge #ccc\"\n    >\n      <Row justifyContent=\"space-between\" flexWrap=\"wrap\" fontSize=\"70%\">\n        {player.playedCards.map(card => (\n          <PlayedCard card={card} />\n        ))}\n      </Row>\n    </Row>\n  </Column>\n);\n\ninterface PlayedCardProps {\n  card: Model.DevelopmentCard;\n}\n\nconst PlayedCard = ({ card }: PlayedCardProps) => (\n  <Box\n    width=\"3em\"\n    height=\"4em\"\n    borderRadius=\".5em\"\n    position=\"relative\"\n    border=\"1px ridge #333\"\n    margin=\"0 1em\"\n    fontSize=\"70%\"\n    padding=\".5em\"\n  >\n    <div itemProp=\"resource\" data-value={card.resourceType} />\n    <div itemProp=\"prestigePoints\" data-value={card.prestigePoints} />\n  </Box>\n);\n","import { AllResourceTypes } from \"Model\";\nimport React from \"react\";\n\nexport const Tokens = ({ availableTokens, selectToken }) => (\n  <>\n    {AllResourceTypes.map(token => (\n      <div key={token} itemProp=\"token\" onClick={() => selectToken(token)}>\n        <div itemProp=\"resource\" data-value={token} />\n        <div itemProp=\"count\" data-value={availableTokens[token]} />\n      </div>\n    ))}\n  </>\n);\n","import { Box } from \"@material-ui/core\";\nimport { styled } from \"@material-ui/styles\";\nimport React from \"react\";\nimport * as Model from \"../../Model\";\nimport { Column, Row } from \"./components\";\nimport { DevelopmentCard } from \"./DevelopmentCard\";\n\nconst CurrentPlayerName = styled(\"h3\")({\n  writingMode: \"vertical-lr\",\n  textOrientation: \"upright\"\n});\n\nexport const UserPlayerInventory = ({\n  isCurrentPlayer,\n  player,\n  onPlayReservedCard\n}: {\n  isCurrentPlayer: boolean;\n  player: Model.Player;\n  onPlayReservedCard(card: Model.DevelopmentCard): void;\n}) => (\n  <Row\n    position=\"relative\"\n    flexGrow={1}\n    className={isCurrentPlayer ? \"active\" : \"\"}\n  >\n    <CurrentPlayerName>{player.name}</CurrentPlayerName>\n    <Box\n      className=\"prestigePoints\"\n      width=\"2rem\"\n      fontSize=\"150%\"\n      fontWeight=\"800\"\n    >\n      {player.prestigePoints}\n    </Box>\n    <Row flexGrow={1}>\n      <Row border=\"1px solid #333\">\n        <Column\n          id=\"playerTokens\"\n          fontSize=\"140%\"\n          flexWrap=\"wrap\"\n          width=\"4rem\"\n          padding=\".4rem .2rem\"\n        >\n          {Model.AllResourceTypes.filter(\n            resource => player.tokens[resource] > 0\n          ).map(\n            resource =>\n              player.tokens[resource] > 0 && (\n                <div key={resource} itemProp=\"token\">\n                  <div itemProp=\"resource\" data-value={resource} />\n                  <div itemProp=\"count\" data-value={player.tokens[resource]} />\n                </div>\n              )\n          )}\n        </Column>\n        <Row id=\"reservedCards\" flexGrow={1}>\n          {player.reservedCards.map(card => (\n            <DevelopmentCard\n              key={card.id}\n              card={card}\n              onSelected={onPlayReservedCard}\n            />\n          ))}\n        </Row>\n      </Row>\n      <Row id=\"playedCards\" flexGrow={1} height=\"100%\">\n        {groupCards(player.playedCards).map(({ resourceType, cards }) => (\n          <Column\n            className={`cardStack ${resourceType}`}\n            width=\"5rem\"\n            position=\"relative\"\n            fontSize=\"5em\"\n            fontWeight={600}\n            justifyContent=\"center\"\n            alignContent=\"center\"\n          >\n            {cards.length}\n          </Column>\n        ))}\n      </Row>\n    </Row>\n  </Row>\n);\n\ntype DevelopmentCardGroup = {\n  resourceType: Model.ResourceType;\n  cards: Model.DevelopmentCard[];\n};\n\nconst groupCards = (cards: Model.DevelopmentCard[]): DevelopmentCardGroup[] =>\n  cards.reduce((grouped: DevelopmentCardGroup[], card) => {\n    const { resourceType } = card;\n    let group = grouped.find(x => x.resourceType === resourceType);\n\n    if (group == null) {\n      grouped.push({ resourceType, cards: [card] });\n    } else {\n      group.cards.push(card);\n    }\n\n    return grouped;\n  }, []);\n","import { Snackbar } from \"@material-ui/core\";\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\nimport { IBoardProps } from \"boardgame.io/react\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport * as Model from \"../../Model\";\nimport {\n  calculatePlayerResourceTotals,\n  findCurrentPlayer,\n  findPlayer,\n  hasRequiredResources\n} from \"../../util\";\nimport { Moves } from \"../game\";\nimport \"./board.css\";\nimport { Overlay } from \"./components\";\nimport { GameOver } from \"./GameOver\";\nimport { MainBoard } from \"./MainBoard\";\nimport { PlayerList } from \"./PlayerList\";\nimport { Tokens } from \"./Tokens\";\nimport { UserPlayerInventory } from \"./UserPlayerInventory\";\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      color: \"#000\",\n      backgroundColor: \"#fff\",\n      fontFamily: \"'Segoe UI', Tahoma, Geneva, Verdana, sans-serif\",\n      fontSize: \"calc(100vw/75)\",\n      height: \"100vh\",\n      display: \"grid\",\n      gridColumnGap: \"0.4rem\",\n      gridRowGap: \"0.4rem\",\n      gridTemplateColumns: \"auto 3rem calc(25% - 0.4rem)\",\n      gridTemplateRows: \"calc(75% - 0.4rem) 25%\",\n      gridTemplateAreas: `\n        \"board      tokens    player-list\"\n        \"inventory  inventory inventory\"`\n    },\n\n    tokens: {\n      gridArea: \"tokens\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"space-around\",\n      fontSize: \"1.9rem\",\n\n      \"& [itemProp='token']\": {\n        display: \"flex\",\n        flexDirection: \"column\"\n      },\n\n      \"& [itemProp='token'] [itemProp='resource']\": {},\n\n      \"& [itemProp='token'] [itemProp='count']\": {\n        position: \"absolute\",\n        padding: \".4em\",\n        fontSize: \"60%\",\n        fontWeight: 900\n      },\n\n      \"& [itemprop='resource'][data-value='Onyx'] + [itemProp='count']\": {\n        color: \"#fff\"\n      }\n    },\n\n    board: {\n      gridArea: \"board\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-evenly\"\n    },\n\n    playerList: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignContent: \"center\",\n      gridArea: \"player-list\",\n      backgroundColor: \"#fff\",\n      padding: \"0.4em\"\n    },\n\n    inventory: {\n      gridArea: \"inventory\",\n      display: \"flex\"\n    }\n  })\n);\n\nexport const GameLayout: React.FC<\n  Partial<IBoardProps<Model.GameState, Moves>>\n> = props => {\n  const {\n    G: state,\n    G: { availableCards, availableTokens, currentPlayerId, players },\n    ctx: { gameover },\n    playerID,\n    moves,\n    step\n  } = props;\n\n  const classes = useStyles({});\n  const [isSnackbarVisible, setIsSnackbarVisible] = useState(false);\n  const [snackbarMessage, setSnackbarMessage] = useState(null);\n\n  const userPlayerId = playerID || players[0].id;\n\n  const [selectedTokens, setSelectedTokens] = useState([]);\n  const currentPlayer = findCurrentPlayer(state);\n  const userPlayer = findPlayer(players, userPlayerId);\n  const otherPlayers = players.filter(x => x.id !== userPlayerId);\n  const isUserPlayersTurn = userPlayerId === currentPlayerId;\n\n  useEffect(() => {\n    setSelectedTokens([]);\n\n    if (currentPlayerId !== userPlayerId) {\n      step();\n    }\n  }, [step, currentPlayerId, userPlayerId]);\n\n  const selectToken = useCallback(\n    token => {\n      if (token === Model.ResourceType.Wild) {\n        console.debug(`Ignoring invalid selection of a wild token`);\n        return;\n      }\n\n      let newSelectedTokens = selectedTokens;\n\n      if (selectedTokens.indexOf(token) > -1) {\n        if (selectedTokens.length === 1) {\n          moves.collectSingleResource(token);\n          newSelectedTokens = [];\n        } else {\n          console.debug(`Ignoring invalid duplicate selection of ${token}`);\n        }\n      } else {\n        newSelectedTokens = [...selectedTokens, token];\n      }\n\n      if (newSelectedTokens.length === 3) {\n        moves.collectMultipleResources(newSelectedTokens);\n        newSelectedTokens = [];\n      }\n\n      setSelectedTokens(newSelectedTokens);\n    },\n    [moves, selectedTokens]\n  );\n\n  const showWarning = (message: string) => {\n    setSnackbarMessage(message);\n    setIsSnackbarVisible(true);\n  };\n\n  const selectDevelopmentCard = (card: Model.DevelopmentCard): void => {\n    const playerResources = calculatePlayerResourceTotals(currentPlayer);\n\n    if (hasRequiredResources(card.cost, playerResources)) {\n      moves.purchaseDevelopmentCard(card);\n    } else {\n      moves.reserveDevelopmentCard(card);\n    }\n  };\n\n  const playReservedCard = (card: Model.DevelopmentCard): void => {\n    const playerResources = calculatePlayerResourceTotals(currentPlayer);\n\n    if (hasRequiredResources(card.cost, playerResources)) {\n      moves.purchaseDevelopmentCard(card);\n    } else {\n      showWarning(\"Not enough resources to purchase this card!\");\n    }\n  };\n\n  return (\n    <>\n      {gameover && (\n        <GameOver\n          onClose={() => window.location.reload()}\n          results={gameover}\n          userPlayer={userPlayer}\n        />\n      )}\n      <Overlay isActive={!isUserPlayersTurn} />\n      <Snackbar\n        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n        open={isSnackbarVisible}\n        onClose={() => setIsSnackbarVisible(false)}\n        autoHideDuration={2000}\n        message={snackbarMessage}\n      />\n      <div id=\"container\" className={classes.container}>\n        <div id=\"tokens\" className={classes.tokens}>\n          <Tokens availableTokens={availableTokens} selectToken={selectToken} />\n        </div>\n        <div id=\"board\" className={classes.board}>\n          <MainBoard\n            availableCards={availableCards}\n            selectDevelopmentCard={selectDevelopmentCard}\n          />\n        </div>\n        <div id=\"player-list\" className={classes.playerList}>\n          <PlayerList players={otherPlayers} currentPlayer={currentPlayer} />\n        </div>\n        <div id=\"inventory\" className={classes.inventory}>\n          {userPlayer && (\n            <UserPlayerInventory\n              isCurrentPlayer={userPlayer.id === currentPlayerId}\n              player={userPlayer}\n              onPlayReservedCard={playReservedCard}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Game } from \"boardgame.io/core\";\nimport { GameState, GameResults } from \"../../Model\";\nimport moves from \"./moves\";\nimport { initializeGame as setup } from \"./initializeGame\";\nimport { populateVisibleCards } from \"../../util\";\n\nexport type Moves = { [key in keyof typeof moves]: (...args) => void };\n\nexport const SplendidGame = Game<GameState, Moves>({\n  setup,\n\n  moves,\n\n  flow: {\n    movesPerTurn: 1,\n    onTurnBegin: (G, ctx) => {\n      G.currentPlayerId = ctx.currentPlayer;\n    },\n    onTurnEnd: (G, ctx) => {\n      // TODO: evaluate patrons\n      populateVisibleCards(G.availableCards);\n    },\n    endGameIf: (G): GameResults | void => {\n      const winners = G.players.filter(x => x.prestigePoints >= 15);\n\n      if (winners.length) {\n        const rankings = [...G.players].sort(\n          (a, b) => b.prestigePoints - a.prestigePoints\n        );\n        return { winner: winners[0], rankings };\n      }\n    }\n  }\n});\n","import { importDeck, shuffle, populateVisibleCards } from \"../../util\";\nimport { Player } from \"Model\";\n\nexport const initializeGame = initial => {\n  const players: Player[] = Array(initial.numPlayers)\n    .fill(0)\n    .map(\n      (_, id) =>\n        ({\n          id: String(id),\n          name: `Player ${id + 1}`,\n          isHuman: false,\n          patrons: [],\n          playedCards: [],\n          tokens: {},\n          prestigePoints: 0,\n          reservedCards: [],\n          totalResources: {}\n        } as Player)\n    );\n\n  const deck = importDeck();\n\n  shuffle(deck);\n\n  const availableCards = [\n    {\n      level: 3,\n      stock: deck.filter(x => x.level === 3),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 2,\n      stock: deck.filter(x => x.level === 2),\n      visibleCards: Array(4).fill(null)\n    },\n    {\n      level: 1,\n      stock: deck.filter(x => x.level === 1),\n      visibleCards: Array(4).fill(null)\n    }\n  ];\n\n  if (process.env.NODE_ENV !== \"production\") {\n    players[0].tokens.Wild = 1;\n    players[0].tokens.Diamond = 2;\n    players[0].reservedCards.push(availableCards[2].stock.pop());\n    players[0].playedCards.push(availableCards[2].stock.pop());\n  }\n\n  populateVisibleCards(availableCards);\n\n  const availableTokens = {\n    Wild: 7,\n    Emerald: 5,\n    Onyx: 5,\n    Ruby: 5,\n    Sapphire: 5,\n    Diamond: 5\n  };\n\n  return {\n    availableCards,\n    availableTokens,\n    players\n  };\n};\n","import { Client } from \"boardgame.io/react\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport ai from \"./ai\";\nimport board from \"./board\";\nimport game from \"./game\";\nimport { GameSettings } from \"./setup/GameSettingsStore\";\n\nconst GameClient = observer<{ settings: GameSettings }>(({ settings }) => {\n  const View = Client({\n    game,\n    board,\n    ai,\n    numPlayers: settings.numberOfPlayers,\n    multiplayer: settings.multiplayer,\n    debug: process.env.NODE_ENV !== \"production\"\n  } as any);\n\n  return <View />;\n});\n\nexport default GameClient;\n","import React from \"react\";\nimport GameClient from \"./GameClient\";\nimport { observer } from \"mobx-react-lite\";\n\nconst SplendidGame = observer(() => {\n  return (\n    <GameClient\n      settings={{\n        debug: process.env.NODE_ENV !== \"production\",\n        numberOfPlayers: 2,\n        musicVolume: 0,\n        sfxVolume: 0,\n        players: []\n      }}\n    />\n  );\n});\nSplendidGame.displayName = \"SplendidGame\";\n\nexport default SplendidGame;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\nimport Splendid from \"./Splendid\";\n\nexport default () => <Splendid />;\n"],"sourceRoot":""}